#!/bin/bash -l

# Get country IP addresses from RIPE and compile them into separate ipv4 and ipv6 plain lists
## See https://stat.ripe.net/docs/data_api

# Attempts to determine local subnet for the main network interface and adds that to the end of the list
## NOTE: works for me. May not work on your system. Test the function "findlocalsubnet" separately before use!

# Depends on jq - JSON processor.
## On Debian and derivatives, if you are missing jq then install it using this command:
## apt install jq

# NOTE: This script attempts to find the local subnet and add it to the ipv4 list. Works for me. May not work on your system. Test!!!
## The relevant function is "findlocaliprange"


myversion=0.25.3
me=$(basename "$0")

ripe_url="https://stat.ripe.net/data/country-resource-list/data.json?v4_format=prefix&resource="


#### FUNCTIONS

usage() {
    cat <<EOF

    Usage: $me -c country [more options]

    Options:
	-c tld		: tld/country code
	-p path		: Path to store downloaded ip lists (default: /var/lib/geoblocker_bash)
	-S size		: minimum ipv4 list file size to trust the data (default = 5000)
	-s size		: minimum ipv6 list file size to trust the data (default = 2000)

	-d		: Debug
	-h		: This help
EOF
}

die() {
        echo "$@" 1>&2
        echo ""
        logger -t geoblocker_bash-fetch "$@"
        exit 1
}




findlocalsubnet () {
### NOTE: works for me. May not work on your system. Test!!!
# Requires following tools: ip, awk, grep, sed

	# find local ip (ipv4)
	localip="$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}')"
	# another way to get it:
	# IP=$(ip addr show | grep 'inet'| grep -v '127.0.0.1' | cut -d: -f2 | awk 'NF>0{ print $2}');


	# transform into subnet
	localsubnet=$(echo "$localip" | sed 's|\([0-9]*\.[0-9]*\.[0-9]*\.\)[0-9]*|\10|')


	# Sanity check
	# Attempts to make sure that what we have is a valid ipv4 subnet
	# regex compiled from 2 suggestions found here:
	# https://stackoverflow.com/questions/5284147/validating-ipv4-addresses-with-regexp

	regex_pattern='^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}(/([01]?\d\d?|2[0-4]\d|25[0-5]))$'
	(echo "$localsubnet" | grep -Pq $regex_pattern); rv=$?

	if [ $rv -ne 0 ]; then
		# if validation fails, return empty string
		echo ""
	else
		echo "$localsubnet"
	fi
}



#### Parse arguments

while getopts "c:p:S:s:dh" opt; do
    case $opt in
        c) country=$OPTARG;;
        p) whitelist_path=$OPTARG;;
        S) min_size_ipv4=$OPTARG;;
        s) min_size_ipv6=$OPTARG;;
        d) debug=true;;
        h) usage;;
    esac
done
shift $((OPTIND -1))


#### Initialize variables

min_size_ipv4=${min_size_ipv4:-5000}  # default is 5000 bytes
min_size_ipv6=${min_size_ipv6:-2000}  # default is 2000 bytes
whitelist_path=${whitelist_path:-/var/lib/geoblocker_bash}  # default is /var/lib/geoblocker_bash

#### Checks

if [ -z "$country" ]; then
	usage
	echo ""
	err="Error: Specify country with -c! Exiting."
	die "$err"
fi

url="$ripe_url$country"

# use curl or wget, depending on which one we find
curl_or_wget=$(if hash curl 2>/dev/null; then echo "curl -s"; elif hash wget 2>/dev/null; then echo "wget -qO-"; fi);
if [ -z "$curl_or_wget" ]; then
	err="Error: Neither curl nor wget found. Cannot download data. Exiting."
	die "$err"
fi

# check that we have jq
if ! command -v jq &> /dev/null; then
	err="Error: Cannot find the jq Json processor. Install it with 'apt install jq' or similar. Exiting"
	die "$err"
fi

#### Main

tmpfile=$(mktemp "/tmp/ripe-$country-XXXX.json")

[ $debug ] && echo "Debug: Trying: $curl_or_wget '$url'" >&2

$curl_or_wget "$url" > $tmpfile
rv=$?

if [ $rv -ne 0 ]; then
	err="Error $rv trying to run $curl_or_wget $url. Exiting."
	die "$err"
else
	echo "Successfully fetched $url"
fi


status=$(jq -r '.status' $tmpfile)
if [ ! "$status" = "ok" ]; then
	ripe_msg=$(jq -r -c '.messages' $tmpfile)
	echo "Error: RIPE replied with status = '$status'."
	echo "The requested url was '$url'"
	echo "and the messages in their reply were: '$ripe_msg'"
	echo "The full response is in $tmpfile"
	err="Error: could not fetch ip list from RIPE. Exiting"
	die "$err"
fi

ripe_db_time=$(jq -r '.data.query_time' $tmpfile)
[ $debug ] && echo "Debug: ripe_db_time=$ripe_db_time" >&2
date_new=$(date -d "$ripe_db_time" +%s)

family="ipv4"

for family in ipv4 ipv6; do

	filename="${family}_$country"
	out_list="$whitelist_path/$filename"

	if [ "$family" = "ipv6" ]; then min_size="$min_size_ipv6"; else min_size="$min_size_ipv4"; fi

	if [ -f "$out_list" ]; then
		date_old=$(stat --printf "%Y" "$out_list")
	else
		date_old=0
	fi

	if [ ! $date_new -gt $date_old ]; then
		echo "Note: Not updating $filename because data querytime is the same as existing list time: $date_old ($(date --date=@$date_old))." >&2
	fi
	if [ $date_new -gt $date_old ]; then

		[ $debug ]  && echo "Debug: Querytime is newer than of old list $filename, updating..."
		jq -r ".data.resources.$family | .[]" "$tmpfile" > "$out_list.new"
		touch -d "$ripe_db_time" "$out_list.new"

		### Check for minimum size before updating our list

		size=$(stat --printf %s "$out_list.new")

                [ $debug ] && echo "Debug: $filename size: $size"
	        [ $debug ] && echo "Debug: min_size for $family: $min_size"

		if [ "$size" -gt "$min_size" ]; then
			echo "Updating $out_list"
			mv "$out_list.new" "$out_list"

			# Add local subnet to the list, only for ipv4
			if [ "$family" = "ipv4" ]; then
				subnet="$(findlocalsubnet)";
				if [ -z $subnet ]; then
			                err="Error: couldn't determine local subnet."
					rm "$out_list"
					rm "$tmpfile"
					die "$err"
				else
					echo "$subnet" >> "$out_list"
					[ $debug ] && echo "Debug: found local subnet: \"$subnet\""
				fi
			fi

		else
			echo "Error: fetched $filename size of $size bytes not greater than minimum $min_size bytes. Probably a download error. Not updating $filename." >&2
			err="Error: Fetched $filename is too small: $size bytes. Possibly a download error. Exiting"
			dt=$(date +%F_%H%M%S)

                        echo "Removing previous bad lists for $filename" >&2
                        rm "$out_list"*.bad

  			echo "Saving downloaded list for reference as $out_list-$dt.bad" >&2
			mv "$out_list.new" "$out_list-$dt.bad"
			rm "$tmpfile"
			die "$err"
		fi
	fi
done

rm "$tmpfile"
echo ""
