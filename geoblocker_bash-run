#!/bin/bash -l

# geoblocker_bash-run

# Serves as a proxy to call the -fetch, -apply and -backup scripts with arguments required for each action.
# Intended for easy triggering from the -manage script and from cron jobs.

# Supported actions: add, remove, update

# 'geoblocker_bash-run -a add -c <"country_codes">' :
#        Fetches iplist and applies ipset and iptables rules for specified countries.

# 'geoblocker_bash-run -a remove -c <"country_codes">' :
#        Removes iplist, ipset and iptables rules for specified countries.

# 'geoblocker_bash-run -a update' : intended for triggering from periodic cron jobs.
#        Updates the ipsets for all country codes that had been previously configured.

# all actions:
#     If successful, calls the backup script to create backup of the current iptables state and current ipset.
#     If an error is enountered, classifies it as a temporary or a permanent error.
#     Permanent errors mean that something is fundamentally broken.
#     Temporary errors are transient (for example a download error).
#     For permanent errors, calls the -backup script to restore last known-good ipsets and iptables state.


#### Initial setup

me=$(basename "$0")
suite_name="geoblocker_bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'."; exit 1; }

source "$script_dir/${suite_name}-common" || { echo "Error: Can't find ${suite_name}-common."; exit 1; }
# NOTE that some functions and variables are sourced from the *common script

# sanitize arguments
sanitize_args "$@"
# replace arguments with sanitized ones
set -- "${arguments[@]}"


#### USAGE

usage() {
    cat <<EOF

$me
Serves as a proxy to call the -fetch, -apply and -backup scripts with arguments required for each action.

Usage: $me -a <action> [-c <"tld [tld] ... [tld]">] [-s] [-d] [-h]

Options:
    -a update|add|remove  : Action to perform: "update", "add" or "remove" associated iptables rules
    -c <"country_codes">  : tld's (country codes). if passing multiple country codes, use double quotes
    -s                    : Skip fetching (only run the apply script)
    -o                    : No backup: don't create backup after successful action

    -d                    : Debug
    -h                    : This help

EOF
}

#### PARSE ARGUMENTS

while getopts "a:c:osdh" opt; do
	case $opt in
		a) action=$OPTARG;;
		c) arg_tlds=$OPTARG;;
		s) skipfetch="true";;
		o) nobackup="true";;
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; exit 1;;
	esac
done
shift $((OPTIND -1))

echo

# get debugmode variable from either the args or environment variable, depending on what's set
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg

#### FUNCTIONS


#### VARIABLES

# get datadir from the config file
datadir="$(getconfig "Datadir")"
knowngood_file="$datadir/iptables_knowngood.bak"
whitelist_dir="$datadir/ip_lists"
tlds_status_file="$datadir/tlds_status"

if [ -z "$arg_tlds" ] || [ "$action" = "update" ]; then
	# read tlds from the config file
	debugprint "Loading tlds from file..."
	tlds="$(getconfig "Countries")"
else
	tlds="$arg_tlds"
fi

# trim single-quotes if any
tlds="${tlds//\'}"


#### CHECKS

# check for root
[ "$EUID" -ne 0 ] && die 1 "This needs to be run as root."

# check that the config file exists
[ ! -f "$conf_file" ] && die "Config file '$conf_file' doesn't exist! Run the installation script again."

# check for *fetch
[ ! "$skipfetch" ] && if ! command -v ${suite_name}-fetch &> /dev/null; then
	die 1 "Error: Can not find '${suite_name}-fetch'. Did you run setup? Exiting."
fi

# check for *apply
if ! command -v ${suite_name}-apply &> /dev/null; then
	die 1 "Error: Can not find '${suite_name}-apply'. Did you run setup? Exiting."
fi

# check for *backup
if ! command -v ${suite_name}-backup &> /dev/null; then
	die 1 "Error: Can not find '${suite_name}-backup'. Did you run setup? Exiting."
fi

# check for valid action

[ -z "$action" ] && { usage; die 1 "Specify action with '-a <action>'!"; }

case "$action" in
	add) apply_action="add" ;;
	remove) apply_action="remove" ;;
	update) apply_action="add" ;;
	*) usage; die 1 "Error: unsupported action '$action'" ;;
esac

# check for country tlds
[ -z "$tlds" ] && { err="tlds variable can not be empty! Exiting."; usage; die 1 "$err"; }

[ -z "$knowngood_file" ] && die 1 "Error: Known-good file path can not be empty! Exiting."

[ -z "$whitelist_dir" ] && die 1 "Error: Whitelist file path can not be empty! Exiting."


#### MAIN
debugprint "tlds to process: $tlds"

### Fetch ip lists
errcnt="0"
ok_cnt="0"
failed_tlds=""
ok_tlds=""
if [ ! "$skipfetch" ] && [ "$action" != "remove" ]; then
	for tld in $tlds; do
		${suite_name}-fetch -c "$tld" -p "$whitelist_dir"; rv=$?
		if [ $rv -gt 0 ] && [ $rv -lt 254 ]; then
			# (0 < $rv < 254) from fetch means fatal code error rather than fetch error
			die 1 "Error in *fetch script, something is broken."
		elif [ $rv -eq 254 ]; then
			errcnt=$(( errcnt + 1 ))
			failed_tlds="$failed_tlds $tld"
		else
			# ($rv = 255) from fetch means fetched list is not newer than the existing ipset
			[ "$rv" = 255 ] && up_to_date_cnt=$(( up_to_date_cnt + 1 ))
			ok_cnt=$(( ok_cnt + 1 ))
			ok_tlds="$ok_tlds $tld"
		fi
	done

	# trim extra whitespaces
	ok_tlds="$(awk '{$1=$1};1' <<< "$ok_tlds")"
	failed_tlds="$(awk '{$1=$1};1' <<< "$failed_tlds")"

	if [ "$errcnt" -gt 0 ]; then
		msg="Failed to fetch ip lists for countries '$failed_tlds'."
		echo "$msg"
		[ "$nolog" != "true" ] && logger -t ${suite_name}-run "$msg"
		echo "FailedTLDs=$failed_tlds" >> "$tlds_status_file"
	fi

	if [ "$ok_cnt" -gt 0 ]; then
		msg="Successfully fetched the ip lists for countries '$ok_tlds'."
		echo "$msg"
		[ "$nolog" != "true" ] && logger -t ${suite_name}-run "$msg"
		echo "OkTLDs=$ok_tlds" >> "$tlds_status_file"
	else
		err="All fetch attempts failed."
		die 254 "$err"
	fi

	tlds="$ok_tlds"
else
	debugprint "Skipped fetching because '-s' switch was used"
fi
echo

### Apply ip lists

if [ "$action" = "update" ] && [ ! "$skipfetch" ] && [ "$ok_cnt" -le "$up_to_date_cnt" ]; then
# if all successfully fetched ip lists are no newer than existing ipsets, skip the -apply script
	echo "Fetched ip lists are not newer than existing ipsets, skipping iptables reconfiguration."
	echo
else
	${suite_name}-apply -a "$apply_action" -c "$tlds"; rv=$?
	if [ $rv -eq 254 ]; then
		debugprint "NOTE: *apply exited with error code 254."
		echo ""
		# if non-fatal errors occur in *apply, exit with an error
		die 1 ""
	elif [ $rv -gt 0 ] && [ $rv -ne 254 ]; then
		debugprint "NOTE: *apply exited with error code $rv."
		echo ""
		#if fatal errors occur in *apply, attempt to restore last known-good ipsets and iptables state
		${suite_name}-backup -a restore; rv="$?"

		# exit with the same exit code as backup-restore operation
		die "$rv" ""
	fi
	echo

	# call the backup script to create a known-good backup of ipsets and iptables state
	[ -z "$nobackup" ] && ${suite_name}-backup -a backup

	[ "$nolog" != "true" ] && logger -t ${suite_name}-run "Successfully applied action '$action' for countries '$tlds'."
fi

if [ "$errcnt" -ne 0 ]; then rv=254; else rv=0; fi

debugexitmsg

exit "$rv"
