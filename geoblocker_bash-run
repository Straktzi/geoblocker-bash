#!/bin/bash -l

# geoblocker_bash-run

# Serves as a proxy to call the -fetch, -apply and -backup scripts with arguments required for the action.
#
# Supported actions: add, remove, update

# 'geoblocker_bash-run -a add -c <country_code>' : Calls the fetch script, then calls the apply script,
#    passing required arguments to fetch and apply ipset and iptables rules for the specified country.
#    If multiple countries are specified, repeats the operation for each country's ip list.

# 'geoblocker_bash-run -a remove -c <country_code>' : Calls the apply script,
#     passing required arguments to remove the ipset and iptables rules for the specified country.
#     If multiple countries are specified, repeats the operation for each country's ip list.

# 'geoblocker_bash-run -a update' : used for triggering from cron jobs.
#     Calls the fetch script (unless called with the -s - Skip fetch option), then calls the apply script,
#     passing required arguments to fetch and apply ipset and iptables rules for countries listed in the config file.
#     Used to update the ip lists at a periodic schedule, and to activate the rules on reboot.

# all actions:
#     If successful, calls the backup script to create backup of the current (known-good) iptables state and current ipset.
#     If an error is enountered, classifies it as a temporary or a permanent error.
#     Permanent errors mean that something is fundamentally broken. Temporary errors are transient (for example a download error).
#     For permanent errors, calls the -backup script to restore last known-good ipsets and iptables state.

me=$(basename "$0")
suite_name="geoblocker_bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'."; exit 1; }

source "${suite_name}-common" || { echo "Error: Can't find ${suite_name}-common."; exit 1; }
# NOTE that some functions and variables are sourced from the *common script


#### USAGE

usage() {
    cat <<EOF

$me
Supported actions: add, remove, update.
Serves as a proxy to call the -fetch, -apply and -backup scripts with arguments required for each action.

    Usage: $me -a <update|add|remove> [-c <"tld [tld] ... [tld]">] [-s] [-p] [-d] [-h]

    Options:
        -a <action>          : action to perform: "update", "add" or "remove" associated iptables rules
        -c <"country_codes"> : tld's (country codes). if passing multiple country codes, use double quotes
        -s                   : Skip fetching (only run the apply script)
        -p                   : No Drop: applies the config but skips setting INPUT chain default policy to DROP
                                   (continue to accept all connections)
        -o                   : No backup: don't create backup after successful action

        -d                   : Debug
        -h                   : This help

EOF
}

#### PARSE ARGUMENTS

while getopts "a:c:ospdh" opt; do
	case $opt in
		a) action=$OPTARG;;
		c) arg_tlds=$OPTARG;;
		s) skipfetch="true";;
		p) nodrop="-p";;
		o) nobackup="true";;
		d) debug="-d";;
		h) usage; exit 0;;
		\?) usage; exit 1;;
	esac
done
shift $((OPTIND -1))

echo ""

# Print script enter message for debug
debugentermsg

#### FUNCTIONS


#### VARIABLES

# get datadir from the config file
datadir="$(getconfig "Datadir" "$conf_file")"
knowngood_file="$datadir/iptables_knowngood.bak"
whitelist_dir="$datadir/ip_lists"
tlds_status_file="$datadir/tlds_status"

if [ -z "$arg_tlds" ] || [ "$action" = "update" ]; then
	# read tlds from the config file
	debugprint "Loading tlds from file..."
	tlds="$(getconfig "Countries" "$conf_file")"
else
	tlds="$arg_tlds"
fi

# trim single-quotes if any
tlds="${tlds//\'}"


#### CHECKS

# check for *fetch
[ ! "$skipfetch" ] && if ! command -v ${suite_name}-fetch &> /dev/null; then
	die 1 "Error: Can not find '${suite_name}-fetch'. Did you run setup? Exiting."
fi

# check for *apply
if ! command -v ${suite_name}-apply &> /dev/null; then
	die 1 "Error: Can not find '${suite_name}-apply'. Did you run setup? Exiting."
fi

# check for *backup
if ! command -v ${suite_name}-backup &> /dev/null; then
	die 1 "Error: Can not find '${suite_name}-backup'. Did you run setup? Exiting."
fi

case "$action" in
	add) apply_action="add" ;;
	remove) apply_action="remove" ;;
	update) apply_action="add" ;;
	*) usage; die 1 "Error: unsupported action '$action'" ;;
esac

# check for country tlds
[ -z "$tlds" ] && { err="tlds variable can not be empty! Exiting."; usage; die 1 "$err"; }

[ -z "$knowngood_file" ] && die 1 "Error: Known-good file path can not be empty! Exiting."

[ -z "$whitelist_dir" ] && die 1 "Error: Whitelist file path can not be empty! Exiting."

# check for root
[ "$EUID" -ne 0 ] && die 1 "This needs to be run as root."


#### MAIN
debugprint "tlds to process: $tlds"

### Fetch ip lists
errcnt="0"
ok_cnt="0"
failed_tlds=""
ok_tlds=""
if [ ! "$skipfetch" ] && [ "$action" != "remove" ]; then
	for tld in $tlds; do
		${suite_name}-fetch $debug -c "$tld" -p "$whitelist_dir"; rv=$?
		if [ $rv -gt 0 ] && [ $rv -ne 254 ]; then
			# positive return value from fetch means fatal code error rather than fetch error, except for 254
			die 1 "Error in *fetch script, something is broken."
		fi
		if [ $rv -eq 254 ]; then
			errcnt=$(( errcnt + 1 ))
			failed_tlds="$failed_tlds $tld"
		else
			ok_cnt=$(( ok_cnt + 1 ))
			ok_tlds="$ok_tlds $tld"
		fi
	done

	# trim extra whitespaces
	ok_tlds="$(awk '{$1=$1};1' <<< "$ok_tlds")"
	failed_tlds="$(awk '{$1=$1};1' <<< "$failed_tlds")"

	if [ "$errcnt" -gt 0 ]; then
		msg="Failed to fetch the whitelist for countries '$failed_tlds'."
		echo "$msg"
		[ "$nolog" != "true" ] && logger -t ${suite_name}-run "$msg"
		echo "FailedTLDs=$failed_tlds" >> "$tlds_status_file"
	fi

	if [ "$ok_cnt" -gt 0 ]; then
		msg="Successfully fetched the whitelist for countries '$ok_tlds'."
		echo "$msg"
		[ "$nolog" != "true" ] && logger -t ${suite_name}-run "$msg"
		echo "OkTLDs=$ok_tlds" >> "$tlds_status_file"
	else
		err="All fetch attempts failed."
		die 254 "$err"
	fi

	tlds="$ok_tlds"
else
	echo "NOTE: Skipped fetching because -s switch was used"
fi


### Apply ip lists

${suite_name}-apply "$debug" "$nodrop" -a "$apply_action" -c "$tlds"; rv=$?
if [ $rv -eq 254 ]; then
	debugprint "NOTE: *apply exited with error code 254."
	echo ""
	# if non-fatal errors occur in *apply, exit with an error
	die 1 ""
elif [ $rv -gt 0 ] && [ $rv -ne 254 ]; then
	debugprint "NOTE: *apply exited with error code $rv."
	echo ""
	#if fatal errors occur in *apply, attempt to restore last known-good ipsets and iptables state
	${suite_name}-backup -r "$debug"; rv="$?"

	# exit with the same exit code as backup-restore operation
	die "$rv" ""
fi
echo

# call the backup script to create a known-good backup of ipsets and iptables state
[ -z "$nobackup" ] && ${suite_name}-backup "$debug" -b

[ "$nolog" != "true" ] && logger -t ${suite_name}-run "Successfully applied action '$action' for countries '$tlds'."

if [ "$errcnt" -ne 0 ]; then rv=254; else rv=0; fi

debugexitmsg

exit "$rv"
