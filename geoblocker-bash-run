#!/bin/bash -l

# geoblocker-bash-run

# Serves as a proxy to call the -fetch, -apply and -backup scripts with arguments required for each action.
# Intended for easy triggering from the -manage script and from cron jobs.

# all actions:
#     If successful, calls the backup script to create backup of the current iptables state and current ipset.
#     If an error is enountered, classifies it as a temporary or a permanent error.
#     Permanent errors mean that something is fundamentally broken.
#     Temporary errors are transient (for example a download error).
#     For permanent errors, calls the -backup script to restore last known-good ipsets and iptables state.


#### Initial setup

me=$(basename "$0")

# check for root
[[ "$EUID" -ne 0 ]] && {
	err="Error: $me needs to be run as root."
	echo "$err" >&2
	[[ ! "$nolog" ]] && logger "$err"
	exit 1
}

suite_name="geoblocker-bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck disable=SC2015
[[ -n "$script_dir" ]] && cd "$script_dir" || { err="$me: Error: Couldn't cd into '$script_dir'."; echo "$err" >&2; \
	[[ ! "$nolog" ]] && logger "$err"; exit 1; }

# shellcheck source=geoblocker-bash-common
source "$script_dir/${suite_name}-common" || { err="$me: Error: Can't source ${suite_name}-common."; echo "$err" >&2; \
	[[ ! "$nolog" ]] && logger "$err"; exit 1; }

# **NOTE** that some functions and variables are sourced from the *common script


# sanitize arguments
sanitize_args "$@"
# replace arguments with sanitized ones
set -- "${arguments[@]}"


#### USAGE

usage() {
    cat <<EOF

$me
Serves as a proxy to call the -fetch, -apply and -backup scripts with arguments required for each action.

Usage: $me <action> [-c <"country_code [country_code] ... [country_code]">] [-d] [-h]

Actions:
    add|remove                   : Add or remove country codes to/from geoblocking rules.
    update                       : Fetch ip lists and reactivate them via the *apply script.
    apply                        : Apply previously downloaded lists (skip fetching)

Options:
    -c <"country_codes">          : country codes (ISO 3166-1 alpha-2). if passing multiple country codes, use double quotes.

    -o                            : No backup: don't create backup of current firewall state before the action.

    -d                            : Debug
    -h                            : This help

EOF
}

#### PARSE ARGUMENTS

# 1st argument should be the requested action
action_run="$1"
shift 1


# check for valid action and translate *run action to *apply action
# *apply does the same thing whether we want to update, apply(refresh) or to add a new ccode, which is why this translation is needed

case "$action_run" in
	add) action_apply="add" ;;
	remove) action_apply="remove" ;;
	update) action_apply="add" ;;
	apply) action_apply="add" ;;
	"") usage; die "Specify action in the 1st argument!" ;;
	*) usage; err1="Error: Unsupported action: '$action_run'."; err2="Specify action in the 1st argument!"; die "$err1" "$err2" ;;
esac

# process the rest of the arguments
while getopts ":c:odh" opt; do
	case $opt in
		c) arg_ccodes=$OPTARG;;
		o) nobackup="true";;
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; die "Error: Unknown option: '$OPTARG'." ;;
	esac
done
shift $((OPTIND -1))

[[ -n "$*" ]] && {
	usage
	err1 "Error in arguments. First unrecognized argument: '$1'."
	err2="Note: If specifying multiple country codes, put them in double quotation marks."
	die "$err1" "$err2"
}

echo

# get debugmode variable from either the args or environment variable, depending on what's set
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode

# Print script enter message for debug
debugentermsg


#### VARIABLES

# Read current set of countries from the the config file, unless the variable is already set by a parent script
config_ccodes="${config_ccodes:-$(getconfig "Countries")}" || die "Error: Couldn't read value for Countries from the config file."

nobackup="${nobackup:-$(getconfig "NoBackup")}" || die "Error: Couldn't read value for NoBackup from the config file."

export config_ccodes

# if no country codes were passed via arguments, and action is update or apply, get the codes from the config file
# otherwise use the codes from arguments
if [[ ( -z "$arg_ccodes" ) && ( "$action_run" =~ ^(update|apply)$ ) ]]; then
	ccodes="$config_ccodes"
else
	ccodes="$arg_ccodes"
fi

# trim single-quotes if any
ccodes="${ccodes//\'}"

# trim extra whitespaces
ccodes="$(trim_spaces "$ccodes")"

ccodes_cnt=$(echo "$ccodes" | wc -w)

# get list_type from the config file, unless the list_type variable is already set by a parent script
list_type="${list_type:-$(getconfig "ListType")}" || die "Error: Couldn't read value for ListType from the config file."

export list_type

# convert to lower case
families_arg="${families_arg,,}"

#convert to lower case
action_run="${action_run,,}"

# get datadir from the config file, unless the variable is already set by a parent script
datadir="${datadir:-$(getconfig "Datadir")}" || die "Error: Couldn't read value for Datadir from the config file."

knowngood_file="$datadir/iptables_knowngood.bak"
iplist_dir="$datadir/ip_lists"

status_file="$iplist_dir/status"

failed_ccodes_cnt=0


#### CHECKS

missing_deps="$(check_deps jq iptables-save iptables-restore ipset ${suite_name}-fetch ${suite_name}-apply ${suite_name}-backup)" \
	|| die "Error: missing dependencies: $missing_deps."

# check that the config file exists
[[ ! -f "$conf_file" ]] && die "Error: config file '$conf_file' doesn't exist! Run the installation script again."

[[ -z "$knowngood_file" ]] && die "Error: Known-good file path can not be empty!"

[[ -z "$iplist_dir" ]] && die "Error: iplist file path can not be empty!"

# check for country ccodes
[[ -z "$ccodes" ]] && { err="Error: no country codes were specified!"; usage; die "$err"; }

[[ -z "$list_type" ]] && die "\$list_type variable should not be empty! Something is wrong!"


#### MAIN

### Fetch ip lists

if [[ "$action_run" =~ ^(update|add)$ ]]; then

	# mark all ccodes as failed in the status file before launching *fetch. if *fetch completes successfully, it will reset this
	setstatus "$status_file" "failed_ccodes=$ccodes" || die "Error: Failed to write to status file '$status_file'."

	call_script "${suite_name}-fetch" -c "$ccodes" -p "$iplist_dir" -s "$status_file"

	# read *fetch results from the status file
	ccodes_to_update="$(getstatus "$status_file" "ccodes_to_update")" || { die "Error: Couldn't read value for 'ccodes_to_update' from status file '$status_file'."; }
	failed_ccodes="$(getstatus "$status_file" "failed_ccodes")" || { die "Error: Couldn't read value for 'failed_ccodes' from status file '$status_file'."; }

	[[ -n "$failed_ccodes" ]] && echolog -err "Failed to fetch and validate subnet lists for countries '$failed_ccodes'."

	failed_ccodes_cnt=$(echo "$failed_ccodes" | wc -w)

	[[ "$failed_ccodes_cnt" -ge "$ccodes_cnt" ]] && die 254 "All fetch attempts failed."

else
	ccodes_to_update="$ccodes"
fi


### Apply ip lists

if [[ -z "$ccodes_to_update" ]]; then
	echolog "Firewall reconfiguration isn't required."
else
	if [[ -z "$nobackup" ]]; then
		rv=0

		# check config coherency vs active ipsets and firewall rules before creating backup
		# skip if in manualmode (launched by -manage) because -manage checks coherency anyway
		[[ ! "$manualmode" ]] && { check_ccodes_coherency; rv=$?; }
		if [[ $rv -eq 0 ]]; then
			# call the backup script to create a known-good backup of ipsets and iptables state
			call_script "${suite_name}-backup" create-backup
		else
			echolog -err "Warning: actual $list_type firewall config differs from the config file!"
			echolog -err "Please run the *manage script to restore config coherency!"
			echolog -err "If it's a recurring issue, please consider filing a bug report!"
			[[ -n "$unexpected_ccodes" ]] && echolog -err "Unexpected country codes in the firewall: '$unexpected_ccodes'"
			[[ -n "$missing_ccodes" ]] && echolog -err "Missing country codes in the firewall: '$missing_ccodes'"
			echo
		fi
	else
		debugprint "Skipping backup of current firewall state."
	fi

	call_script "${suite_name}-apply" "$action_apply" -c "$ccodes_to_update"; rv=$?

#	[[ "$testmode" ]] && rv=1

	if [[ $rv -eq 254 ]]; then
		debugprint "NOTE: *apply exited with error code 254."
		echo
		echolog -err "Error: *apply exited with code '254'. Failed to execute action '$action_apply'."
	elif [[ $rv -gt 0 && $rv -ne 254 ]]; then
		debugprint "NOTE: *apply exited with error code '$rv'."
		echo
		die "$rv"
	else
		echolog "Successfully executed action '$action_run' for countries '$ccodes_to_update'."
	fi
fi

if [[ "$failed_ccodes_cnt" -ne 0 ]]; then
	debugprint "failed_ccodes_cnt: $failed_ccodes_cnt"
	rv=254
else
	rv=0
fi


unset debugmode list_type config_ccodes

exit "$rv"
