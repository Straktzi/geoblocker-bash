#!/bin/bash -l

# geoblocker-bash-run

# Serves as a proxy to call the -fetch, -apply and -backup scripts with arguments required for each action.
# Intended for easy triggering from the -manage script and from cron jobs.

# all actions:
#     If successful, calls the backup script to create backup of the current iptables state and current ipset.
#     If an error is enountered, classifies it as a temporary or a permanent error.
#     Permanent errors mean that something is fundamentally broken.
#     Temporary errors are transient (for example a download error).
#     For permanent errors, calls the -backup script to restore last known-good ipsets and iptables state.


#### Initial setup

me=$(basename "$0")

# check for root
[ "$EUID" -ne 0 ] && {
	err="Error: $me needs to be run as root."
	echo "$err" >&2
	logger "$err"
	exit 1
}

suite_name="geoblocker-bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'." >&2; exit 1; }

source "$script_dir/${suite_name}-common" || { echo "Error: Can't source ${suite_name}-common." >&2; exit 1; }
# NOTE that some functions and variables are sourced from the *common script

# sanitize arguments
sanitize_args "$@"
# replace arguments with sanitized ones
set -- "${arguments[@]}"


#### USAGE

usage() {
    cat <<EOF

$me
Serves as a proxy to call the -fetch, -apply and -backup scripts with arguments required for each action.

Usage: $me <action> [-c <"tld [tld] ... [tld]">] [-s] [-d] [-h]

Actions:
    add|remove                   : Add or remove TLDs (country codes) to/from geoblocking rules
    update                       : Fetch ip lists and reactivate them via the *apply script

Options:
    -c <"country_codes">          : tld's (country codes). if passing multiple country codes, use double quotes

    -s                            : For update action only. Skip fetching (only run the apply script).
    -o                            : No backup: don't create backup after successful action

    -d                            : Debug
    -h                            : This help

EOF
}

#### PARSE ARGUMENTS

# 1st argument should be the requested action
action_run="$1"
shift 1

while getopts ":c:osdh" opt; do
	case $opt in
		c) arg_tlds=$OPTARG;;
		s) skipfetch="true";;
		o) nobackup="true";;
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; echo "Error: Unknown option: '-$OPTARG'." >&2; exit 1;;
	esac
done
shift $((OPTIND -1))

[[ "$*" != "" ]] && {
	usage
	echo "Error in arguments. First unrecognized argument: '$1'." >&2
	echo "Note: If specifying multiple country codes, put them in double braces." >&2
	exit 1
}

echo

# get debugmode variable from either the args or environment variable, depending on what's set
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg


#### VARIABLES

# Read current set of countries from the the config file into config_tlds
config_tlds="$(getconfig "Countries")" || { die "Error: Couldn't read value for Countries from the config file."; }

if [ -z "$arg_tlds" ] || [ "$action_run" = "update" ]; then
	tlds="$config_tlds"
else
	tlds="$arg_tlds"
fi

# trim single-quotes if any
tlds="${tlds//\'}"

# get list_type from the config file
list_type="$(getconfig "ListType")" || { die -nolog "Error: Couldn't read value for ListType from the config file."; }

# set global variable
export list_type="$list_type"

#convert to lower case
action_run="${action_run,,}"

# get datadir from the config file
datadir="$(getconfig "Datadir")" || { die "Error: Couldn't read value for Datadir from the config file."; }

knowngood_file="$datadir/iptables_knowngood.bak"
iplist_dir="$datadir/ip_lists"


#### CHECKS

# check that the config file exists
[ ! -f "$conf_file" ] && die "Config file '$conf_file' doesn't exist! Run the installation script again."

[ -z "$knowngood_file" ] && die 1 "Error: Known-good file path can not be empty! Exiting."

[ -z "$iplist_dir" ] && die 1 "Error: iplist file path can not be empty! Exiting."

# check for *fetch
[ ! "$skipfetch" ] && if ! command -v ${suite_name}-fetch &> /dev/null; then
	die 1 "Error: Can not find '${suite_name}-fetch'. Did you run setup? Exiting."
fi

# check for *apply
if ! command -v ${suite_name}-apply &> /dev/null; then
	die 1 "Error: Can not find '${suite_name}-apply'. Did you run setup? Exiting."
fi

# check for *backup
if ! command -v ${suite_name}-backup &> /dev/null; then
	die 1 "Error: Can not find '${suite_name}-backup'. Did you run setup? Exiting."
fi

# check for country tlds
[ -z "$tlds" ] && { err="tlds variable can not be empty! Exiting."; usage; die 1 "$err"; }

# check for valid action

[ -z "$action_run" ] && { usage; die 1 "Specify action!"; }

# translate *run action to *apply action
case "$action_run" in
	add) action_apply="add" ;;
	remove) action_apply="remove" ;;
	update) action_apply="add" ;;
	*) usage; die 1 "Error: unsupported action '$action_run'" ;;
esac

[ -z "$list_type" ] && die "\$list_type variable should not be empty! Something is wrong!"

#### MAIN


### Fetch ip lists
errcnt=0
ok_cnt=0
up_to_date_cnt=0
failed_tlds=""
ok_tlds=""
if [ ! "$skipfetch" ] && [ "$action_run" != "remove" ]; then
	for tld in $tlds; do
		${suite_name}-fetch -c "$tld" -p "$iplist_dir"; rv=$?
		if [ $rv -gt 0 ] && [ $rv -lt 254 ]; then
			# (0 < $rv < 254) from fetch means fatal code error rather than fetch error
			failed_tlds="$tlds"
			echolog -err "Failed to fetch ip lists for country '$tld'."
			die 1 "Error in *fetch script, something is broken."
		elif [ $rv -eq 254 ]; then
			errcnt=$(( errcnt + 1 ))
			failed_tlds="$failed_tlds $tld"
		else
			# ($rv = 255) from fetch means fetched list is not newer than the existing ipset
			[ "$rv" = 255 ] && up_to_date_cnt=$(( up_to_date_cnt + 1 ))
			ok_cnt=$(( ok_cnt + 1 ))
			ok_tlds="$ok_tlds $tld"
		fi
	done

	# trim extra whitespaces
	ok_tlds="$(awk '{$1=$1};1' <<< "$ok_tlds")"
	failed_tlds="$(awk '{$1=$1};1' <<< "$failed_tlds")"

	if [ "$errcnt" -gt 0 ]; then
		echolog -err "Failed to fetch ip lists for countries '$failed_tlds'."
	fi

	if [ "$ok_cnt" -gt 0 ]; then
		echolog "Successfully fetched the ip lists for countries '$ok_tlds'."
	else
		err="All fetch attempts failed."
		die 254 "$err"
	fi

	tlds="$ok_tlds"
else
	debugprint "Skipped fetching because '-s' switch was used"
fi
echo


### Apply ip lists

if [ "$action_run" = "update" ] && [ ! "$skipfetch" ] && [ "$ok_cnt" -le "$up_to_date_cnt" ]; then
# if all successfully fetched ip lists are not newer than existing ipsets, skip the -apply script
	echolog "Fetched ip lists are not newer than applied ip lists, skipping iptables reconfiguration."
	echo
else
	${suite_name}-apply "$action_apply" -c "$tlds"; rv=$?
	if [ $rv -eq 254 ]; then
		debugprint "NOTE: *apply exited with error code 254."
		echo ""
		# if non-fatal errors occur in *apply, set the nobackup variable
		echolog "Error: *apply exited with code 254. Failed to apply action '$action_apply'."
		nobackup="true"
	elif [ $rv -gt 0 ] && [ $rv -ne 254 ]; then
		debugprint "NOTE: *apply exited with error code $rv."
		echo ""
		#if fatal errors occur in *apply, attempt to restore last known-good ipsets and iptables state
		${suite_name}-backup restore; rv="$?"

		# exit with the same exit code as backup-restore operation
		die "$rv" ""
	fi
	echo
fi

if [ "$errcnt" -eq 0 ]; then
	echolog "Successfully applied action '$action_run' for countries '$tlds'."
fi

if [ -z "$nobackup" ]; then
	# check config coherency vs active ipsets and firewall rules before performing any action

	check_tlds_coherency; rv=$?
	if [ $rv -eq 0 ]; then
		# call the backup script to create a known-good backup of ipsets and iptables state
		${suite_name}-backup create-backup
	else
		echolog "Warning: actual $list_type firewall config differs from the config file!"
		echolog "Please run the *manage script to restore config coherency!"
		echolog "If it's a recurring issue, please consider filing a bug report!"
		[ "$unexpected_tlds" != "" ] && echo "Unexpected tlds in the firewall: '$unexpected_tlds'" >&2
		[ "$missing_tlds" != "" ] && echo "Missing tlds in the firewall: '$missing_tlds'" >&2
		echo
	fi
else
	debugprint "Skipping backup of current firewall state."
fi

if [ "$errcnt" -ne 0 ]; then
	rv=254
else
	rv=0
fi

debugexitmsg

exit "$rv"
