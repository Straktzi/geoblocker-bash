#!/usr/bin/env bash

# geoblocker_bash-cron

# Provides an interface to configure cron jobs for geoblocking.
# Supported actions: apply, disable.


#### Initial setup

me=$(basename "$0")
suite_name="geoblocker_bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'." >&2; exit 1; }

source "$script_dir/${suite_name}-common" || { echo "Error: Can't find ${suite_name}-common." >&2; exit 1; }
# **NOTE** that some functions and variables are sourced from the *common script


#### USAGE

usage() {
    cat <<EOF

$me
Provides interface to configure cron jobs for geoblocking.

Usage: $me -a <action> [-s "<sch_expression>"] [-c <"command">] [-d] [-h]

Options:
    -a apply|disable       : action to perform:
                                 "apply" configures cron using the schedule provided with the -s option
                                        if -s option is omitted, applies the settings from the config file
                                        (including enabled/disabled state).
                                 "disable" removes cron jobs and turns off persistence.
    -s <"sch_expression">  : specifies the schedule expression (must be inside double quotes).

    -d                     : Debug
    -h                     : This help

EOF
}

#### PARSE ARGUMENTS
while getopts ":a:s:dh" opt; do
	case $opt in
		a) action=$OPTARG;;
		s) cron_schedule_args=$OPTARG;;
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; echo "Error: Unknown option: '-$OPTARG'." >&2; exit 1;;
	esac
done
shift $((OPTIND -1))

[[ "$*" != "" ]] && {
	usage
	echo "Error in arguments. First unrecognized argument: '$1'." >&2
	echo "Note: When specifying cron schedule, put it in double braces." >&2
	exit 1
}

echo

# get debugmode value from either the args or environment variable
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg


#### Functions

remove_cron_jobs() {
# remove existing cron jobs for geoblocker_bash
if [ "$crondisabled" != "true" ]; then
	echo -n "Removing cron jobs for ${suite_name}... "
	crontab -u root -l 2>/dev/null | grep -v "$run_command" | sudo crontab -u root -
	rv=$?
	if [ $rv -ne 0 ]; then
		die -nolog "Error running the crontab command."
	else
		echo "Ok."
	fi
fi
}


#### Variables

# check if cron service is enabled
(systemctl is-enabled cron.service) > /dev/null || crondisabled="true"

cron_schedule_conf="$(getconfig CronSchedule)" || { die -nolog "Error: Couldn't read value for CronSchedule from the config file."; }
cron_schedule_default="$(getconfig DefaultSchedule)" || { die -nolog "Error: Couldn't read value for Defaultschedule from the config file."; }
no_persistence="$(getconfig NoPersistence)" || { die -nolog "Error: Couldn't read value for NoPersistence from the config file."; }

install_dir="$(getconfig "Installdir")" || { die -nolog "Error: Couldn't read value for Installdir from the config file."; }
run_command="${install_dir}/${suite_name}-run"

# get sleeptime (for reboot) from the config file
sleeptime="$(getconfig "RebootSleep")" || { die -nolog "Error: Couldn't read value for RebootSleep from the config file."; }


#### Checks

# check for valid action

[ -z "$action" ] && { usage; die -nolog "Specify action with '-a <action>'!"; }

# convert action to lower case
action="${action,,}"

case "$action" in
	apply) ;;
	disable) ;;
	*) die -nolog "Error: unsupported action '$action'." ;;
esac

# translate arguments received from *manage
[[ "$action" = "disable" && "$cron_schedule_args" = "disable" ]] && cron_schedule_args=""

# check for conflicting arguments
[[ "$action" = "disable" && -n "$cron_schedule_args" ]] && \
	die -nolog "Error: Conflicting arguments. Don't use '-a disable' with '-s <\"sch_expression\">'."


#### Main

# if (action is "disable") OR
# (NoPersistence is set to "true" in the config file AND new schedule was not provided in args)
# then disable cron jobs
if [[ "$action" = "disable" || ( "$no_persistence" = "true" && -z "$cron_schedule_args" ) ]]; then
	debugprint "disabling cron jobs..."
	# disable cron jobs in config
	setconfig "NoPersistence=true" || \
		{ die -nolog "Failed to write 'NoPersistence=true' to the config file"; }

	remove_cron_jobs; rv=$?
	exit $rv
fi


# here we know that the action is apply schedule either from config or from the args

if [ "$crondisabled" = "true" ]; then
	err1="Error: cron service seems to be disabled. Can not create cron jobs!"
	err2="On Debian and derivatives, enable the cron service with 'systemctl enable cron.service'. Exiting."
	die -nolog "$err1" "$err2"
fi

# if cron_schedule wasn't provided in args, use the schedule from the config file
cron_schedule="${cron_schedule_args:-$cron_schedule_conf}"
# if current schedule in the config file is empty, use the default schedule
cron_schedule="${cron_schedule:-$cron_schedule_default}"

[ -z "$cron_schedule" ] && die -nolog "Could not read cron schedule from the config file '$conf_file' !"


### Validate cron schedule
debugprint "Validating cron schedule: '$cron_schedule'."
validate_cron_schedule.sh -x "$cron_schedule"; rv=$?
if [ "$rv" -ne 0 ]; then
	die -nolog "Error validating cron schedule '$cron_schedule'."
else
	debugprint "Successfully validated cron schedule: '$cron_schedule'."
fi

#### Remove existing cron jobs
remove_cron_jobs; rv=$?


#### Create cron jobs

echo ""
echo -n "Creating periodic cron job with schedule '$cron_schedule'... "
echo -e "$(sudo crontab -u root -l 2>/dev/null)\n$cron_schedule \"$run_command\" -a update &>/dev/null" | sudo crontab -u root -
rv=$?

if [ $rv -ne 0 ]; then
	die -nolog "Error running the crontab command."
else
	echo "Ok."
	cron_line_result="$(crontab -u root -l 2>/dev/null |  grep  "\"$run_command\"")"
fi

echo -n "Creating reboot cron job... "

# using the -s switch for the *run script to skip fetching at reboot
## otherwise if there was no internet connection at reboot time, *fetch would fail which would cause *run to fail,
## so *apply wouldn't run, which would leave the system without geoblocking rules
echo -e "$(sudo crontab -u root -l 2>/dev/null)\n@reboot sleep $sleeptime && \"$run_command\" - a update -s &>/dev/null" | \
			sudo crontab -u root -; rv=$?

if [ $rv -ne 0 ]; then
	die -nolog "Error running the crontab command."
else
	echo "Ok."
	reboot_cron_line_result="$(crontab -u root -l 2>/dev/null |  grep "reboot sleep .* && \"$run_command\"")"
fi

[ "$debugmode" ] && echo
debugprint "Cron line: '$cron_line_result'"
debugprint "Reboot cron line: '$reboot_cron_line_result'"


# write to the config file
setconfig "NoPersistence=false" "CronSchedule=$cron_schedule" || \
		{ die -nolog "Failed to write updated cron schedule to the config file"; }


debugexitmsg

exit 0
