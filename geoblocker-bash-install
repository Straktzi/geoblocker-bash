#!/usr/bin/env bash

# geoblocker-bash-install

# Installer for geoip blocking suite of bash scripts
# Must be run as root

# Requires the following additional files (included in the distribution):
# geoblocker-bash-apply, geoblockder_bash-backup, geoblocker-bash-common, geoblocker-bash-cronsetup,
# geoblocker-bash-fetch, geoblocker-bash-manage, geoblocker-bash-run, geoblocker-bash-uninstall,
# geoblocker-bash-reset, validate-cron-schedule.sh, check-ip-in-source.sh, cca2.list, cidr_lookup_table.list


#### Initial setup
export LC_ALL=C
printf '%s\n' "$PATH" | grep '/usr/local/bin' &>/dev/null || export PATH="$PATH:/usr/local/bin"

me=$(basename "$0")

# check for root
[[ "$EUID" -ne 0 ]] && {
	err="Error: $me needs to be run as root."
	echo "$err" >&2
	exit 1
}

suite_name="geoblocker-bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck disable=SC2015
[[ -n "$script_dir" ]] && cd "$script_dir" || { echo "$me: Error: Couldn't cd into '$script_dir'." >&2; exit 1; }

# shellcheck source=geoblocker-bash-common
source "$script_dir/${suite_name}-common" || { echo "$me: Error: Can't source '${suite_name}-common'." >&2; exit 1; }

# **NOTE** that some functions and variables are sourced from the *common script


# sanitize arguments
sanitize_args "$@"
# replace arguments with sanitized ones
set -- "${arguments[@]}"


#### USAGE

usage() {

    cat <<EOF

$me
Installer for geoip blocking suite of bash scripts.
Must be run as root.

This script:
1) Requires to specify countries codes (ISO 3166-1 alpha-2) to include in the whitelist/blacklist
2) Requires to specify whitelist or blacklist mode for installation with the '-m' option
3) Accepts a custom cron schedule expression as an argument. Default cron schedule is "15 4 * * *" - at 4:15 [am] every day.
4) Creates system folder structure for scripts, config and data.
5) Copies all scripts included in the suite to /usr/local/bin.
6) Creates backup of pre-install policies for INPUT and FORWARD iptables chains.
7) Calls the *manage script to set up geoblocker and then call the -fetch and -apply scripts.
8) If an error occurs during installation, calls the uninstall script to revert any changes made to the system.

Usage: $me -c <"country_code [country_code] ... [country_code]"> -m <whitelist|blacklist> [-s <"sch_expression"|disable>] [ -f <families> ]
            [-r <ripe|ipdeny>] [-o] [-n] [-p] [-d] [-h]

Core Options:
    -c <"country_codes">            : 2-letter country codes (ISO 3166-1 alpha-2) to fetch and apply the iplists for.
                                            (if passing multiple country codes, use double quotes)
    -m <whitelist|blacklist>        : geoblocking mode: whitelist or blacklist
                                            (to change mode after installation, run the *install script again)
    [-s <"sch_expression"|disable>] : schedule expression for the periodic cron job implementing auto-updates of the ip lists,
                                            must be inside double quotes
                                            default is "15 4 * * *" (at 4:15 [am] every day)
                                      "disable" will *skip* creating the autoupdate cron job so there will be no automatic updates of the ip lists
    [-f <ipv4|ipv6|"ipv4 ipv6">]    : families (defaults to 'ipv4 ipv6'). if specifying multiple families, use double quotes.

    [-u <ripe|ipdeny>]              : Force using this source for download. Currently supported sources: ripe, ipdeny. Defaults to ripe.

Extra Options:
    [-o]                            : No backup. Will not create a backup of previous firewall state (and geoblocking ipsets) before applying changes.
                                         (doesn't affect backup of chains policies)
    [-n]                            : No persistence. Will *skip* creating the cron job which is required for geoblocking to work upon reboot.
    [-p]                            : No Drop: installs the script and configures the firewall but in the whitelist mode,
                                            skips setting INPUT chain default policy to DROP
                                            (everything will be installed and configured but geoblocking will not be enabled)
                                            (does't affect blacklist functionality)
    [-d]                            : Debug
    [-h]                            : This help

EOF
}

#### PARSE ARGUMENTS

while getopts ":c:m:s:f:u:onpdh" opt; do
	case $opt in
		c) ccodes=$OPTARG;;
		m) list_type=$OPTARG;;
		s) cron_schedule=$OPTARG;;
		f) families_arg=$OPTARG;;
		u) source_arg=$OPTARG;;

		o) nobackup="true";;
		n) no_persistence="true";;
		p) nodrop="true";;
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; die "Error: Unknown option: '$OPTARG'." ;;
	esac
done
shift $((OPTIND -1))

[[ -n "$*" ]] && {
	usage
	err1="Error in arguments. First unrecognized argument: '$1'."
	err2="Note: If specifying multiple country codes, put them in double quotation marks."
	die -nolog "$err1" "$err2"
}

echo

# get debugmode variable from either the args or environment variable
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg


#### FUNCTIONS

check_files_exist() {
	local missing_files=""
	local err=0

	# implicitly loops over arguments
	for dep_file; do
		if [[ ! -s "$dep_file" ]]; then
			[[ -z "$missing_files" ]] && missing_files="'$dep_file'" || missing_deps="${missing_files}, '$dep_file'"
			(( err++ ))
		fi
	done
	[[ "$err" -gt 0 ]] && { echo "$missing_files"; return 1; } || return 0
}

copyscripts() {
	local destination="${install_dir}/"

	# implicitly loops over arguments
	for scriptfile; do
		cp -p "$scriptfile" "$destination" || install_failed "Error copying file '$scriptfile' to '$destination'."
		chmod a+x "${destination}${scriptfile}" || install_failed "Error: failed to set 'a+x' permissions for file '${destination}${scriptfile}'."
	done
}

install_failed() {
	echo "$*" >&2
	echo -e "\nInstallation failed." >&2
	echo "Uninstalling ${suite_name}..." >&2
	call_script ${suite_name}-uninstall
	exit 1
}

get_local_country(){
# checks local country code by asking the user, then validates against known-good country codes list

	local user_ccode=""
	local rv=0

	echo -e "\nPlease enter your country code." >&2
	echo "It will be used to check if your geoblocking settings may lock you out of your remote machine and warn you if so." >&2
	echo -e "If you want to skip this check, press Enter.\n" >&2
	while true; do
		read -p "Country code (2 letters)/Enter to skip: " -r
		REPLY="${REPLY^^}"
		if [[ -z "$REPLY" ]]; then echo -e "Skipping...\n" >&2; return 0
		else
			# validate user input vs cca2 list
			validate_ccode "$REPLY" "$script_dir/cca2.list"; rv="$?"
			case "$rv" in
				0)  user_ccode="$REPLY"; break ;;
				1)  die "Internal error while trying to validate country codes." ;;
				2)  echo -e "\n'$REPLY' is not a valid (ISO 3166-1 alpha-2) country code." >&2
					echo -e "Look up your country code online and try again, or press Enter to skip this check.\n" >&2
				;;
			esac
		fi
	done

	echo "$user_ccode"
	return 0
}


#### CONSTANTS

install_dir="/usr/local/bin"
datadir="/var/lib/${suite_name}"
preinstall_policies_file="${datadir}/preinstall_policies.bak"
iplist_dir="${datadir}/ip_lists"
default_schedule="15 4 * * *"

# set environment variable "nolog" to avoid daughter scripts writing errors
#	to syslog when encountering incorrect arguments from the user
export nolog="true"

# set environment variable "manualmode" to signal to daughter scripts that user interaction is possible
export manualmode="true"

export in_install="true"

export datadir


#### VARIABLES

source_default="ripe"
[[ -n "$source_arg" && ! "${source_arg,,}" =~ ^(ripe|ipdeny)$ ]] && { usage; die "Unsupported source: '$source_arg'."; }
source_arg="${source_arg,,}"
source="${source_arg:-$source_default}"

families_default="ipv4 ipv6"
[ -n "$families_arg" ] && families_arg="${families_arg,,}"
case "$families_arg" in
	inet|inet6|'inet inet6'|'inet6 inet' ) families="$families_arg" ;;
	''|'ipv4 ipv6'|'ipv6 ipv4' ) families="$families_default" ;;
	ipv4 ) families="inet" ;;
	ipv6 ) families="inet6" ;;
	* ) echo "$me: Error: invalid family '$families_arg'." >&2; exit 1 ;;
esac

# convert input country codes to upper case
ccodes="${ccodes^^}"

cron_schedule="${cron_schedule:-$default_schedule}"
sleeptime="30"

if [[ -n "$list_type" ]]; then
	# convert to lower case
	list_type="${list_type,,}"

	# set global variable
	export list_type="$list_type"
fi


#### CHECKS

missing_deps="$(check_deps iptables-save iptables-restore ipset)" || die "Error: missing dependencies: $missing_deps."

# Check for valid country codes
if [[ -z "$ccodes" ]]; then
	usage
	die "Specify country codes with '-c <\"country_codes\">'!"
else
	rv=0
	for ccode in $ccodes; do
		validate_ccode "$ccode" "$script_dir/cca2.list" || {
			[[ -z "$bad_ccodes" ]] && bad_ccodes="$ccode" || bad_ccodes="$bad_ccodes $ccode"
			(( rv++ ))
		}
	done

	[[ "$rv" -ne 0 ]] && {
		errmsg1="Error: Invalid country codes: '$bad_ccodes'."
		errmsg2="Look up country codes (ISO 3166-1 alpha-2) online and try again."
		die "$errmsg1" "$errmsg2"
	}
fi

if [[ -z "$list_type" ]]; then
	usage
	die "Specify firewall mode with '-m whitelist' or '-m blacklist'!"
fi

[[ "$list_type" != "whitelist" && "$list_type" != "blacklist" ]] &&  die "Error: Unrecognized list type '$list_type'! Use either 'whitelist' or 'blacklist'!"

[[ -z "$families" ]] && die "Error: \$families variable should not be empty!"

missing_files="$(check_files_exist "${suite_name}-fetch" "${suite_name}-common" "${suite_name}-apply" "${suite_name}-run" \
	"${suite_name}-manage" "${suite_name}-cronsetup" "${suite_name}-backup" "${suite_name}-uninstall" "${suite_name}-reset" \
	"validate-cron-schedule.sh" "check-ip-in-source.sh" "detect-local-subnets-AIO.sh" "cca2.list")" || \
	install_failed "Error: missing files: $missing_files."

if ! [[ "$cron_schedule" = "disable" && "$no_persistence" ]]; then
	# check cron service
	check_cron || {
		err1="Error: cron seems to not be enabled."
		err2="Enable the cron service before using this script."
		err3="Or run with options '-n' '-s disable' which will disable persistence and autoupdates."
		die "$err1" "$err2" "$err3"
	}
fi


#### MAIN

user_ccode="$(get_local_country)"

# Create the directory for config and, if required, parent directories
mkdir -p "$conf_dir"

# write initial config to the config file
echo -n "Setting initial config... "

setconfig "UserCcode=$user_ccode" "Lists=" "ListType=$list_type" "Installdir=$install_dir" "Datadir=$datadir" \
	"Source=$source" "Families=$families" "FamiliesDefault=$families_default" \
	"CronSchedule=$cron_schedule"  "DefaultSchedule=$default_schedule" \
	"RebootSleep=$sleeptime" "NoBackup=$nobackup" "NoPersistence=$no_persistence" "NoDrop=$nodrop"; rv="$?"

if [[ "$rv" -ne 0 ]]; then
	echo "Failed." >&2
	install_failed "Error writing initial config to the config file."
else echo "Ok."
fi

# Create the directory for downloaded lists and, if required, parent directories
mkdir -p "$iplist_dir"

## run the *reset script to make sure no previous firewall rules and cron jobs exist
call_script ${suite_name}-reset


## Copy scripts to $install_dir

echo -n "Copying scripts to $install_dir... "
copyscripts "${suite_name}-common" "${suite_name}-fetch" "${suite_name}-apply" "${suite_name}-run" "${suite_name}-manage" "${suite_name}-cronsetup" \
	"${suite_name}-backup" "${suite_name}-uninstall" "${suite_name}-reset" "validate-cron-schedule.sh" "check-ip-in-source.sh" "detect-local-subnets-AIO.sh"
echo -e "Ok.\n"

## Create a symlink from ${suite_name}-manage to ${suite_name}
rm "${install_dir}/${suite_name}" &> /dev/null
ln -s "${install_dir}/${suite_name}-manage" "${install_dir}/${suite_name}" ||
	install_failed "Failed to create symlink from ${suite_name}-manage to ${suite_name}"

# copy cca2.list
cp "cca2.list" "$conf_dir" || install_failed "Error copying file 'cca2.list' to '$conf_dir'."

### Back up pre-install policies for INPUT and FORWARD chains

echo -n "Creating backup of current INPUT and FORWARD iptables chains policies... "

# if the backup file already exists, continue installing but skip overwriting the backup file
if [[ -f "$preinstall_policies_file" ]]; then
	echo "Backup file already exists, skipping creation of iptables policies backup." >&2
else
	preinstall_input_policy=$(iptables -nL | grep "Chain INPUT" | awk -F'policy |)' '{print $2}')
	preinstall_forward_policy=$(iptables -nL | grep "Chain FORWARD" | awk -F'policy |)' '{print $2}')
	if [[ -z "$preinstall_input_policy" || -z "$preinstall_forward_policy" ]]; then
		install_failed "Error: failed to determine current iptables policies."
	fi
	touch "$preinstall_policies_file" || install_failed "Error: failed to create pre-install policies backup file."

	echo "INPUT $preinstall_input_policy" >> "$preinstall_policies_file"
	echo "FORWARD $preinstall_forward_policy" >> "$preinstall_policies_file"
	echo "Ok."
	debugprint "Pre-install policies:   INPUT: $preinstall_input_policy, FORWARD: $preinstall_forward_policy"
fi

# only allow root to read the $datadir and files inside it
# '600' means only the owner can read or write to the files
chmod -R 600 "$datadir"

# since we are installing as root, root should already be the owner
# but just to be safe
chown -R root:root "$datadir"

# cd into the install directory
# exit in case "cd" fails

# shellcheck disable=SC2015
[[ -n "$install_dir" ]] && cd "$install_dir" || install_failed "Error: Couldn't cd into '$install_dir'."


### Add iplist(s) for $ccodes to managed iplists, then fetch and apply the iplist(s)
call_script ${suite_name}-manage add -f -c "$ccodes"; rv="$?"

# the *manage script exits with return value 254 if requested country is already included in the config
if [[ $rv -ne 0 && $rv -ne 254 ]]; then
	install_failed "Failed to create and apply the iplist."
fi

if ! [[ "$no_persistence" && "$cron_schedule" = "disable" ]]; then
	### Set up cron jobs
	call_script ${suite_name}-manage schedule -s "$cron_schedule"; rv="$?"

	if [[ $rv -ne 0 ]]; then
		install_failed "Error: failed to set up cron jobs."
	fi
else
	echo -e "Warning: Installed with no persistence and no autoupdate functionality.\n"
fi

echo -e "View current geoblocking status with '${yellow}${suite_name} status${no_color}' (may require 'sudo').\n"

echo
echo "Install done."

echo

exit 0
