#!/bin/bash

# geoblocker-bash-common

# Common functions and variables for geoblocker-bash suite
# This script does nothing if called directly. It is sourced from other scripts.

### Functions

check_deps(){
# tests commands specified in arguments and complains if something's missing (by echo'ing it out in the end and setting return value to 1)
# if an argument contains '|' then tests for all alternatives and only if all are missing, complains

	# check for bash >= 4.0
	bash_v="${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}"
	requiredver="4.0"
	if [ "$(printf '%s\n' "$requiredver" "$bash_v" | sort -V | head -n1)" != "$requiredver" ]; then
		echo "Error: missing dependency: 'bash v${requiredver}' or higher is required but 'bash v$bash_v' is installed." >&2
		echo
		exit 1
	fi

	local missing_deps=""
	local err=0

	IFS_OLD="$IFS"
	IFS="${IFS_OLD}|"
	# implicitly loops over arguments
	for dep; do
		# process 'or' statements received as 'command_1|command_2...|command_n'
		if [[ "$dep" = *'|'* ]]; then
			local test_alt_cnt=0
			local err_alt_cnt=0
			local alt_dep_list=""
			local deps_alt="$dep"
			# process all |-delimited alternatives
			for dep_alt in $deps_alt; do
				let test_alt_cnt++
				! command -v "$dep" &> /dev/null && let err_alt_cnt++
				[[ -z "$alt_dep_list" ]] && alt_dep_list="'$dep_alt'" || alt_dep_list="$alt_dep_list or '$dep_alt'"
			done

			if [[ "$err_alt_cnt" -ge "$test_alt_cnt" ]]; then
				[[ -z "$missing_deps" ]] && missing_deps="$alt_dep_list" || missing_deps="${missing_deps}, $alt_dep_list"
				let err++
			fi

		else
			if ! command -v "$dep" &> /dev/null; then
				[[ -z "$missing_deps" ]] && missing_deps="'$dep'" || missing_deps="${missing_deps}, '$dep'"
				let err++
			fi
		fi
	done
	IFS="$IFS_OLD"

	[[ "$err" -gt 0 ]] && { echo "$missing_deps"; return 1; } || return 0
}

echolog() {
# outputs arguments to stdout and writes them to syslog
# if one of the arguments is "-err" then redirect output to stderr
	msg_args1=()
	# check for "-err" option in arguments
	for msg_arg in "$@"; do
		[[ "$msg_arg" = "-err" ]] && msg_is_err="true" || msg_args1+=( "$msg_arg" )
	done

	msg_args2=()
	# check for "-noecho" option in arguments
	for msg_arg in "${msg_args1[@]}"; do
		[[ "$msg_arg" = "-noecho" ]] && noecho="true" || msg_args2+=( "$msg_arg" )
	done

	if [[ -n "${msg_args2[*]}" ]]; then
		# loop through arguments and print them to stderr and to the syslog
		# "$nolog" is set as environment variable (used in *manage and *install scripts)
		for arg in "${msg_args2[@]}"; do
			if [[ ! "$noecho" ]]; then
				[[ "$msg_is_err" ]] && echo "$me_short: $arg" 1>&2 || echo "$me_short: $arg"
			fi
			[[ ! "$nolog" ]] && logger -t "$me" "$arg"
		done
	fi
}

debugprint() {
# prints a debug message
	[[ "$debugmode" ]] && echo -e "	Debug: ${me_short}: $*" >&2
}

debugentermsg() {
	args="$(for arg in "${arguments[@]}"; do printf "%s" "'$arg' "; done)"
	debugprint "\033[1;33mStarted *${me_short_cap}* with args: ${args}\033[0m"
}

debugexitmsg() {
	[[ -n "$parent_short_cap" ]] && debugprint "\033[1;33mBack to *$parent_short_cap*...\033[0m"
}

die() {
	# if first arg is a number, assume it's the exit code
	if [[ "$1" =~ ^[0-9]+$ ]]; then rv="$1"; shift; else rv="1"; fi

	die_args=()

	# check for "-nolog" option in arguments
	for die_arg in "$@"; do
		[[ "$die_arg" = "-nolog" ]] && nolog="true" || die_args+=( "$die_arg" )
	done

	if [[ -n "${die_args[*]}" ]]; then
		echo >&2
		# loop through arguments and print them to stderr and to the syslog
		# "$nolog" is set either when calling die() or as environment variable (used in *manage and *install scripts)
		for arg in "${die_args[@]}"; do
			echo "$me_short: $arg" >&2
			[[ ! "$nolog" ]] && logger -t "$me" "$arg"
		done
	fi
	[[ -n "$parent_short_cap" ]] && debugprint "\033[1;33mBack to $parent_short_cap...\033[0m"
	echo >&2
	exit "$rv"
}

getconfig() {
# reads a field named $1 from the config file $conf_file (or from file $2 if specified)
# outputs the resulting field
# returns 0 if successful
	key_conf="$1"
	target_file="${2:-$conf_file}"
	[[ -z "$key_conf" || -z "$target_file" ]] && return 1

	entry="$(grep "$key_conf=" "$target_file" 2>/dev/null)" || return 2

	value_conf="${entry//$key_conf=}"
	printf "%s" "$value_conf"

	return 0
}

getstatus() {
# utilizes getconfig() but intended for reading status from status files
# 1st argument is path to the status file
# rest of the arguments are passed as is to setconfig()
	target_file="$1"
	shift 1
	local rv=0
	[[ -n "$target_file" ]] && { status_value="$(getconfig "$*" "$target_file")"; rv=$?; } || rv=1
	printf "%s" "$status_value"
	return $rv
}

setconfig() {
# Accepts key=value pairs and writes them to (or replaces in) config file specified in global variable $conf_file
# if one of the value pairs is "target_file=[file]" then writes to $file instead
# returns 0 if successful, 1 if not

# uncomment for debug
#	local arguments=("$@")
#	local args="$(for arg in "${arguments[@]}"; do printf "%s" "'$arg' "; done)"
#	debugprint "\033[1;33mStarted *setconfig* with args: ${args}\033[0m"

	### Parse arguments into associative array
	declare -A arguments_arr

	# loop through arguments
	for argument_conf in "$@"; do
		# read each line into a separate lines_arr element (needed in case an argument contains multiple lines)
		readarray -t lines_arr <<< "$argument_conf"
		for line in "${lines_arr[@]}"; do
			# only process the line if it contains '='
			if [[ "$line" = *'='* ]]; then
		   		key_conf="$(cut -f1 -d= <<< "$line")"
		   		key_length=${#key_conf}
		   		value_conf="${line:$key_length+1}"
		   		if [[ "$key_conf" = "target_file" ]]; then
					arguments_target_file="$value_conf"
				else
					[[ -n "$key_conf" ]] && arguments_arr["$key_conf"]="$(awk '{$1=$1};1' <<< "$value_conf")"
				fi
			fi
		done
	done

	target_file="${arguments_target_file:-$conf_file}"

	# Check that $target_file variable is not empty
	[[ -z "$target_file" ]] && { die "*common: setconfig: '\$target_file' variable is not set!"; }

	# create the config file if it doesn't exist
	if [[ ! -f "$target_file" ]]; then
		touch "$target_file" || { die "*common: setconfig: could not create target_file '$target_file'"; }
	fi

	# read config file into variable
	config_var="$(<"$target_file")" || { die "*common: setconfig: could not read target_file '$target_file'"; }

	for key_conf in "${!arguments_arr[@]}"; do
		value_conf="${arguments_arr[$key_conf]}"

		# remove corresponding config line if it exists
		config_var="$(awk "!/$key_conf/" <<< "$config_var")"

		# add updated config line - new line is here on purpose!
		config_var="$key_conf=$value_conf
$config_var"
	done

	# write modified config file
	echo -e "$config_var" > "$target_file" || { die "*common: setconfig: Error: could not write to file '$target_file'!"; }

	return 0
}

setstatus() {
# utilizes setconfig() but intended for writing status to status files
# 1st argument is path to the status file
# rest of the arguments are passed as is to setconfig()
	target_file="$1"
	shift 1
	local rv=0
	[[ -n "$target_file" ]] && { setconfig "target_file=$target_file" "${@}"; rv=$?; } || rv=1
	return $rv
}

sanitize_string() {
# trims leading, trailing, and extra in-between whitespaces in input string
# replaces new lines (if any) with spaces
# also sorts and removes duplicates
	input_str="$*"
	result_str="$(printf "%s" "$input_str" | tr ' ' '\n' | sort -ibu |  tr '\n' ' ' | awk '{$1=$1};1')"
	printf "%s" "$result_str"
}

find_lists_intersection() {
# finds duplicates-free intersection between space-delimited fields in input strings $1 and $2,
#      and outputs the intersection as a string

	# convert space-separated lists to newline-separated sorted lists
	str1="$(printf "%s\n" "$1" | tr ' ' '\n' | sort -u)"
	str2="$(printf "%s\n" "$2" | tr ' ' '\n' | sort -u)"


	# piping into comm is not allowed so using the "<()" constructions
	# result is space separated intersection list
	intersect_str="$(comm -12 <(printf "%s" "$str1") <(printf "%s" "$str2"))"
	result_str="$(sanitize_string "$intersect_str")"
	printf "%s" "$result_str"
}

find_lists_difference() {
# finds space-delimited fields that exist in strings $1 or $2 but not both
#      and outputs the difference as a string

	# convert space-separated lists to newline-separated sorted lists
	str1="$(printf "%s\n" "$1" | tr ' ' '\n' | sort -u)"
	str2="$(printf "%s\n" "$2" | tr ' ' '\n' | sort -u)"

	# can't pipe into comm so using the "<()" constructions
	# result is space separated difference list
	diff_str="$(comm -3 <(printf "%s" "$str1") <(printf "%s" "$str2"))"
	result_str="$(sanitize_string "$diff_str")"
	printf "%s" "$result_str"
}

subtract_list_a_from_b() {
# removes all space-delimited fields found in string $1 from string $2, outputs the result as a string

	str1="$1"; str2="$2"
	while read -r field_str; do
		str2="${str2//$field_str/}"
	done < <(printf "%s\n" "$str1" | tr ' ' '\n' )
	result_str="$(sanitize_string "$str2")"
	printf "%s" "$result_str"
}

merge_lists() {
# merges string lists then sanitizes the list by removing extra white spaces and replacing \n with " "
	merged_list="$*"
	result_list="$(sanitize_string "$merged_list")"
	printf "%s" "$result_list"
}


check_ccodes_coherency() {
# checks whether current ipsets and iptables rules match ones in the config file

	debugprint "Verifying config coherency..."

	# check for a valid list type
	[[ "$list_type" != "whitelist" && "$list_type" != "blacklist" ]] &&  die "Error: Unrecognized list type '$list_type'!"

	# initialize variables
	unexpected_ccodes=""; missing_ccodes=""
	config_ccodes="$(getconfig "Countries")" || die "Error: Couldn't read value for Countries from the config file."
	active_ccodes="$(find_active_ccodes)" || return 1
#	debugprint "active_ccodes: '$active_ccodes'"
#	debugprint "config_ccodes: '$config_ccodes'"

	# reflect discrepancies in global variables $unexpected_ccodes and $missing_ccodes
	unexpected_ccodes="$(subtract_list_a_from_b "$config_ccodes" "$active_ccodes")"
	missing_ccodes="$(subtract_list_a_from_b "$active_ccodes" "$config_ccodes")"
	ccodes_difference="$(find_lists_difference "$active_ccodes" "$config_ccodes")"

	if [[ -z "$ccodes_difference" ]]; then
		debugprint "Successfully verified config coherency."
		return 0
	else
		debugprint "Failed to verify config coherency."
		return 1
	fi
}

find_active_ccodes() {
# checks current ipsets and iptables rules for geoblocker
# returns a list of active ccodes (country codes)
# if $1 is "all" then returns all ccodes even when there is a difference between ipset ccodes and iptables rules ccodes

	case "$list_type" in
		whitelist) rule_type="ACCEPT" ;;
		blacklist) rule_type="DROP" ;;
		*) die "Error: unexpected list type '$list_type'!"
	esac

	# read iptables state and ipsets list into env variables to avoid querying iptables and ipset every time
	# check existing variable first and only query if value not set yet
	iptables_output="${iptables_output:-$(iptables -vL)}"
	[[ -z "$iptables_output" ]] && die "Error: failed to get iptables state."
	ipset_list="${ipset_list:-$(ipset list -n)}"

	current_ipset_ccodes="$(grep "$suite_name" <<< "$ipset_list" | grep -o '..$' | tr '\n' ' ' | awk '{$1=$1};1')"
	current_iprules_ccodes="$(grep "$rule_type" <<< "$iptables_output" | grep -oP "(?<=src /\* ${suite_name}\_).*?(?= \*/)" | tr '\n' ' ' | awk '{$1=$1};1')"

	ccodes_intersection="$(find_lists_intersection "$current_ipset_ccodes" "$current_iprules_ccodes")"
	ccodes_difference="$(find_lists_difference "$current_ipset_ccodes" "$current_iprules_ccodes")"
	ccodes_merged="$(merge_lists "$current_ipset_ccodes" "$current_iprules_ccodes")"

	if [[ "$1" = "all" ]]; then
		printf "%s" "$ccodes_merged"
	else
		printf "%s" "$ccodes_intersection"
	fi

	[[ -z "$ccodes_difference" ]] && return 0 || { ipsets_incoherent="true"; return 1; }
}


# this can't be used from a sourced script because it'll return the path to the sourced script and not to the caller
# leaving it in for reference
#get_script_dir () {
#	SOURCE=${BASH_SOURCE[0]}
#	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
#		DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
#		SOURCE=$(readlink "$SOURCE")
#		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
#		# if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
#	done
#	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
#	echo "$DIR"
#}

sanitize_args() {
# trims extra whitespaces, discards empty arguments
	arguments=()
	for arg in "$@"; do
		# trim leading and trailing whitespaces
		arg="$(awk '{$1=$1};1' <<< "$arg")"
		# add to array while discarding empty arguments
		[[ -n "$arg" ]] && arguments+=("$arg")
	done
}

validate_ccode(){
# validates country code in $1 against cca2.list
# country code must be in upper case
# optional $2 may contain path to cca2.list
# returns 0 if validation successful, 2 if not, 1 if cca2 list read from file is empty

#	to fetch country codes online:
#	cca2_list="$($fetch_command https://restcountries.com/v3.1/all?fields=cca2 2>/dev/null | jq -r '.[].cca2' 2>/dev/null)"

#	command to xz-compress, convert to base64 and store in a variable:
#	test="$(xz < cca2.list | base64 -w0)"
#	resulting data:
# /Td6WFoAAATm1rRGAgAhARYAAAB0L+Wj4ALtARZdACCQ/UPERPp2ctP2iu+JpKwGwSps8/P8vQpb++GbAHflYA/3wP85V0OjxJaaNZsVRJRqecZIAsmd4IrGOeRgvY6uEjolGV2zY9K8k5F0wSk6L1dLgzEMHfD4UQci+0cuzbW7E4xay6wAt8stj/jfzyZkleZn+cXkEDlVEVTp7GkvCoIpRwlSZlT7a4U6PxoBXpMp5MjYXVVy0qbxDF3nxapo4SLpqR91levUQCW7c+s+Okj26gs/apehIjcOXpYpEmtwRrd6V4uXSyTeOovlskC0lsLWiF+DB2px9ylIq0Kw9gb6PBZ2d4hdDpoL5W/u3a8o20ehjquxJXUa+z4LzZpcZ7TMa6HiPQxIOx+cLeG7U1vBdw2gAAAAt7gTVpGW1WQAAbIC7gUAACPB/N6xxGf7AgAAAAAEWVo=
#	this can be embedded in a script and decoded with the command:
#	test2="$(base64 -d <<< "$test" | xz -d)"

#	but for now, we are using a dedicated uncompressed file

	cca2_path="${2:-"$conf_dir/cca2.list"}"
	local rv=0
	local checked_ccode=""
	local ccode_list="$(<"$cca2_path")" &>/dev/null
	[[ -z "$ccode_list" ]] && { echo "Error: \$ccode_list variable is empty. Perhaps cca2.list is missing?" >&2; return 1; } # if the list variable is empty, revert the installation

	checked_ccode="$(grep -x "$1" <<< "$ccode_list" 2>/dev/null)"; rv=$?
	[[ "$rv" -eq 0 && -n "$checked_ccode" ]] && return 0 || return 2
}

detect_init() {
	# init process is pid 1
	INIT="$(ls -l /proc/1/exe)"
	if [[ $INIT == *"upstart"* ]]; then
		SYSTEMINITDAEMON=upstart
	elif [[ $INIT == *"initctl"* ]]; then
		SYSTEMINITDAEMON=sysvinit
	elif [[ $INIT == *"systemd"* ]]; then
		SYSTEMINITDAEMON=systemd
	elif [[ $INIT == *"busybox"* ]]; then
		SYSTEMINITDAEMON=busybox
	elif [[ $INIT == *"procd"* ]]; then
		SYSTEMINITDAEMON=procd
	elif [[ $INIT == *"/sbin/init"* ]]; then
		INIT="$(/sbin/init --version)"
		if [[ $INIT == *"upstart"* ]]; then
			SYSTEMINITDAEMON=upstart
		elif [[ $INIT == *"systemd"* ]]; then
			SYSTEMINITDAEMON=systemd
		fi
	else
		SYSTEMINITDAEMON=unknown
	fi

	echo "$SYSTEMINITDAEMON"
}

check_cron() {
	local rv=0

	# check the init system
	init_system="$(detect_init)"

	case "$init_system" in
		systemd )
			# check if cron service is enabled
			(systemctl is-enabled cron.service) &>/dev/null; rv=$? ;;
		* )
			# check for cron or crond in running processes (filtering out the the grep process itself as it has the word cron in it)
			ps aux | grep -i '/crond$\|/cron$\|/crond \|cron ' | grep -v "grep" &>/dev/null; rv=$? ;;
	esac
	return "$rv"
}


### Checks

# check for common deps
missing_deps="$(check_deps tr cut sort wc awk sed grep comm logger bc)" || die "Error: missing dependencies: $missing_deps."

# check for curl
command -v "curl" &> /dev/null && curl_exists="true"

# check for wget
command -v "wget" &> /dev/null && wget_exists="true"

[[ "$curl_exists" || "$wget_exists" ]] || die "Missing dependencies: Neither curl nor wget found."


### Variables

# colors
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[1;33m'
purple='\033[0;35m'
no_color='\033[0m'


me="$(basename "$0")"
me_short="${me//${suite_name}-/}"
me_short_cap="${me_short^^}"

parent="$(basename "$(ps -o args= $PPID)" 2>/dev/null | awk -v RS='/| ' '/^.*'"$suite_name"'/ {a=$0} END{print a}')"

[[ "$parent" = "$me" ]] && parent=""
parent_short="${parent//"${suite_name}-"/}"
parent_short_cap="${parent_short^^}"

conf_dir="/etc/${suite_name}"
conf_file="${conf_dir}/${suite_name}.conf"

# global variables to get coherency check results from check_ccodes_coherency()
unexpected_ccodes=""
missing_ccodes=""
ipsets_incoherent=""

### Main
arguments=("$@")

return 0
