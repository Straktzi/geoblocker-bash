#!/usr/bin/env bash

# geoblocker_bash-manage

# Allows to add or remove a whitelist for specified country to/from geoblocking rules
#       and creates/deletes associated cron jobs

me=$(basename "$0")

#### USAGE

usage() {
    cat <<EOF

This script:
    Allows to add or delete a whitelist for the specified country to/from geoblocking rules
        and creates/deletes associated cron jobs.

WARNING if removing a whitelist: Geoblocking will remain active after removal.
		If you remove your country's whitelist, you may lose remote access to the system.
        

    Usage: $me -c <tld> -a <add|remove> [-s "<schedule>"] [-n] [-d] [-h]

    Options:
        -c <tld>        : tld / country code for the country to add/remove the whitelist for
        -a <action>     : action to perform: "add" or "remove" associated rules and cron jobs
        -s "<schedule>" : schedule expression for the cron job, must be inside double quotes

        -n              : No persistence (will not create cron jobs)
        -d              : Debug
        -h              : This help

EOF
}

#### PARSE ARGUMENTS

while getopts "c:a:s:ndh" opt; do
	case $opt in
		c) country=$OPTARG;;
		a) action=$OPTARG;;
		s) cron_schedule=$OPTARG;;
		n) no_persistence=true;;
		d) debug="-d";;
		h) usage; exit 0;;
		\?) usage; exit 1;;
	esac
done
shift $((OPTIND -1))

#### Functions

get_script_dir () {
	SOURCE=${BASH_SOURCE[0]}
	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
		SOURCE=$(readlink "$SOURCE")
		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
		# if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	echo "$DIR"
}

#### Checks

if [ -z "$country" ]; then
	usage
	echo "Specify country with \"-c <country>\"!"
	echo ""
	exit 1
fi

case "$action" in
	add) ;;
	remove) ;;
	\?) usage; echo "Unsupported action \"$action\"."; exit 1;;
esac

# TODO: test empty "action" etc

if [ -z "$action" ]; then
	usage
	echo "Specify action with \"-a <action>\"!"
	echo ""
	exit 1
fi

# check for root
if [ "$EUID" -ne 0 ]
  then echo "This needs to be run as root."
  exit
fi

### Initialize variables

#convert country code to lower case
country=echo "${country,,}"

# TODO: implement config saving in the *install script

conf_dir="/etc/geoblocker_bash"
conf_file="${conf_dir}/geoblocker_bash.conf"

# read datadir from the config file
read -r datadir < <(grep -Po 'Datadir=\K.*' "$conf_file")

# read sleeptime (for reboot) from the config file
read -r sleeptime < <(grep -Po 'RebootSleep=\K.*' "$conf_file")

preinstall_policies_file="$datadir/preinstall_policies.bak"
knowngood_file="$datadir/iptables_knowngood.bak"
whitelist_dir="$datadir/ip_lists"
whitelist_file="$whitelist_dir/$country.list"

# get the script path
read -r scriptdir < <(get_script_dir)

run_command="${scriptdir}/geoblocker_bash-run"
run_args="-c \"$country\" -w \"$whitelist_dir\" -b \"$knowngood_file\""
run_args_reboot="${run_args} -s"

echo ""

# cd into script directory
scriptdir="$(get_script_dir)"

# exit in case "cd" fails
cd "$scriptdir" || echo "Error: could not change directory to \"$scriptdir\". Exiting."; exit 1

if [ ! "$no_persistence" ] && [ "$action" = "add" ]; then

	# if cron_schedule wasn't provided in args, try getting schedule for this country from the config file
	if [ -z "$cron_schedule" ]; then
		read -r cron_schedule < <(grep -Po 'Schedule_${country}=\K.*' "$conf_file")
	fi

	# if that didn't work, use the default schedule from the config file
	if [ -z "$cron_schedule" ]; then
		read -r cron_schedule < <(grep -Po 'Default_schedule=\K.*' "$conf_file")
	fi

	# validate cron schedule
	bash validate_cron_schedule.sh -x "$cron_schedule"; rv=$?
	if [ $rv -ne 0 ]; then
		echo "Error validating cron schedule. Exiting." >&2
		echo ""
		exit 1
	fi


	# Make sure that cron is enabled
	(systemctl is-enabled cron.service) > /dev/null; rv=$?

	if [ $rv -ne 0 ]; then
		echo "Error: cron service seems to be disabled."
		echo "On Debian and derivatives, enable it with \"systemctl enable cron.service\". Exiting." >&2
		echo ""
		exit 1
	fi
else
	[ $debug ] && echo "Debug: Skipping cron checks."
fi


#### Main

### Remove cron jobs

echo ""
echo "Removing cron jobs for country \"$country\"..."
crontab -u root -l 2>/dev/null | grep -v "reboot sleep .* && \"$run_command\" -c \"$country\"" | sudo crontab -u root -
crontab -u root -l 2>/dev/null | grep -v "\"$run_command\"  -c \"$country\"" | sudo crontab -u root -	

# TODO: add -r option to *apply

if [ "$action" = "remove" ]; then
	geoblocker_bash-apply $debug -r -f "$whitelist_file" -b "$knowngood_file"; rv=$?
	if [ $rv -ne 0 ]; then
		echo ""
		exit 1
	else
		[ $debug ] && echo "Successfully removed rules for country \"$country\"."
	fi
else

### Fetch and apply the whitelist

	echo "$run_command $debug $run_args" | bash; rv=$?

	if [ $rv -ne 0 ]; then
		echo "Error running \"$run_command $debug $run_args\". Exiting"
		echo ""
		exit 1
	fi


	# if no persistence was requested, skip adding cron jobs
	if [ ! "$no_persistence" ]; then

### Create cron jobs

		[ $debug ] && echo ""
		echo -n "Creating periodic cron job... "
		echo -e "$(sudo crontab -u root -l 2>/dev/null)\n$cron_schedule \"$run_command\" $run_args &>/dev/null" | sudo crontab -u root -
		rv=$?

		if [ $rv -ne 0 ]; then
			echo "Error running crontab command." >&2
			echo ""
			exit 1
		else
			echo "Success."
			cron_line_result=$(crontab -u root -l 2>/dev/null |  grep  "\"$run_command\" $run_args")
			echo "Cron line: \"$cron_line_result\""
		fi

		[ $debug ] && echo ""
		echo -n "Creating reboot cron job... "

		# using the -s switch for the *run script to skip fetching at reboot
		## otherwise if there was no internet connection at reboot time, *fetch would fail which would cause *run to fail,
		## so *apply wouldn't run, which would leave the system without geoblocking rules

		echo -e "$(sudo crontab -u root -l 2>/dev/null)\n@reboot sleep $sleeptime && \"$run_command\" $run_args_reboot &>/dev/null" | sudo crontab -u root -
		rv=$?

		if [ $rv -ne 0 ]; then
			echo "Error running crontab command." >&2
			echo ""
			exit 1
		else
			echo "Success."
			cron_line_result=$(crontab -u root -l 2>/dev/null |  grep "reboot sleep .* && \"$run_command\" $run_args_reboot")
			echo "Reboot cron line: \"$cron_line_result\""
			echo ""
			echo "View cron jobs with \"sudo crontab -l\""
		fi
	else
		echo "NOTE: No persistence was requested, skipping cron jobs creation."
	fi
fi

