#!/usr/bin/env bash

# geoblocker_bash-manage

# Provides an interface for the user (and for the -install script) to set up geoblocking.

# Supported actions: add, remove, schedule.

# 'geoblocker_bash-manage -a add|remove -c <country_code>' :
#     Adds or removes the specified country codes (tld's) to/from the config file.
#     Calls the -run script to fetch and apply the whitelists.
#     Creates a periodic cron job and a reboot job, unless ran with the -n (no persistence) option.
#     Cron jobs implement persistence and automatic list updates.
#     Accepts an optional custom cron schedule expression as an argument.
#     If schedule is not specified, uses schedule from the config file.

# 'geoblocker_bash-manage -a schedule -s <schedule_expression>' : changes the schedule for the periodic cron job.

me=$(basename "$0")
suite_name="geoblocker_bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'."; exit 1; }

source "${suite_name}-common" || { echo "Error: Can't find ${suite_name}-common."; exit 1; }
# **NOTE** that some functions and variables are sourced from the *common script

#### USAGE

usage() {
    cat <<EOF

$me
    Provides an interface for the user (and for the -install script) to set up geoblocking.
    Supported actions: add, remove, schedule.

WARNING: if removing a whitelist: Geoblocking will remain active after removal.
         If you remove your country's whitelist, you may lose remote access to your system.


    Usage: $me -a <add|remove|schedule> [-c "[tld] [tld] ... [tld]"] [-s "<sch_expression>"] [-n] [-p] [-d] [-h]

    Options:
        -a action               : action to perform: "add" or "remove" associated rules and cron jobs
                                     or "schedule" to change the cron schedule without changing iptables rules

        -c "tld(s)"             : tld / country codes. if passing multiple country codes, use double quotes
        -s "<sch_expression>"   : schedule expression for the periodic cron job, must be inside double quotes

        -n                      : No persistence (skip creating cron jobs)
        -p                      : No Drop: applies the config but skips setting INPUT chain default policy to DROP
                                     (continue to accept all connections)
        -f                      : Force the 'add' action even if specified country had been already added

        -d                      : Debug
        -h                      : This help

EOF
}

#### PARSE ARGUMENTS
while getopts "a:c:s:fnpdh" opt; do
	case $opt in
		a) action=$OPTARG;;
		c) tlds_arg=$OPTARG;;
		s) cron_schedule=$OPTARG;;
		n) skip_cron=true;;
		p) nodrop="-p";;
		f) forceadd="true";;
		d) debug="-d";;
		h) usage; exit 0;;
		\?) usage; exit 1;;
	esac
done
shift $((OPTIND -1))

echo ""

# Print script enter message for debug
debugentermsg


#### FUNCTIONS

find_lists_intersection() {
# finds duplicates-free intersection between space-delimited fields in input strings $1 and $2,
#      and outputs the intersection as a string

	str1="$1"; str2="$2"
	result_str="$(comm -12 <(echo "$str1" | tr ' ' '\n' | sort -u) \
                        <(echo "$str2" | tr ' ' '\n' | sort -u) | tr '\n' ' ')"
	# trim leading, trailing, and extra in-between whitespaces
	result_str="$(awk '{$1=$1};1' <<< "$result_str")"
	echo "$result_str"
}

find_lists_difference() {
# finds space-delimited fields that exist in strings $1 or $2 but not both
#      and outputs the difference as a string

	str1="$1"; str2="$2"
	result_str="$(comm -3 <(echo "$str1" | tr ' ' '\n' | sort -u) \
                        <(echo "$str2" | tr ' ' '\n' | sort -u) | tr '\n' ' ')"
	# trim leading, trailing, and extra in-between whitespaces
	result_str="$(awk '{$1=$1};1' <<< "$result_str")"
	echo "$result_str"
}

remove_a_from_b() {
# removes all space-delimited fields found in string $1 from string $2, outputs the result as a string

	str1="$1"; str2="$2"
	while read -r field_str; do
		str2="${str2//$field_str/}"
	done < <(echo "$str1" | tr ' ' '\n' )
	# trim leading, trailing, and extra in-between whitespaces
	str2="$(awk '{$1=$1};1' <<< "$str2")"
	echo "$str2"
}

#### VARIABLES

# set environment variable "nolog" to avoid daughter scripts writing errors
#	to syslog when encountering incorrect arguments from the user
#	nolog variable is checked in the sourced *common script
export nolog="true"

# get install_dir from the config file
install_dir="$(getconfig "Installdir" "$conf_file")"

#convert country codes to lower case
tlds_arg="${tlds_arg,,}"

# get sleeptime (for reboot) from the config file
sleeptime="$(getconfig "RebootSleepTime" "$conf_file")"

run_command="${install_dir}/${suite_name}-run"

# get datadir from the config file
datadir="$(getconfig "Datadir" "$conf_file")"

tlds_status_file="$datadir/tlds_status"


#### CHECKS

# check for root
[ "$EUID" -ne 0 ] && die 1 "This needs to be run as root."

# check if cron service is enabled
(systemctl is-enabled cron.service) > /dev/null; rv=$?
[ $rv -ne 0 ] && crondisabled="true"


# Check passed arguments for sanity
[ -z "$action" ] && { usage; die 1 "Specify action with '-a <action>'!"; }

[ "$action" != "schedule" ] && [ -z "$tlds_arg" ] && \
	die 1 "Error: action '$action' requires to specify countries with '-c <tlds>'!"

[ "$action" = "schedule" ] && [ -n "$tlds_arg" ] && \
	die 1 "Error: action '$action' only supports changing the cron schedule! Do not use it with the '-c' option!"

[ "$action" = "schedule" ] && [ -n "$skip_cron" ] && \
	die 1 "Error: action '$action' is incompatible with option '-n'!"

[ "$action" = "schedule" ] && [ -z "$cron_schedule" ] && \
	die 1 "Error: action '$action' requires to provide cron schedule with option '-s'!"

[ "$action" = "schedule" ] && [ -n "$nodrop" ] && \
	die 1 "Error: action '$action' is for setting the cron schedule only, don't use it with '-p'!"

case "$action" in
	add) ;;
	remove) ;;
	schedule) ;;
	\?) die 1 "Error: unsupported action '$action'.";;
esac

if [ "$crondisabled" ] && [ -n "$cron_schedule" ]; then
	err1="Error: cron service seems to be disabled. Can not create cron jobs!"
	err2="On Debian and derivatives, enable the cron service with 'systemctl enable cron.service'. Exiting."
	die 1 "$err1" "$err2"
fi

if [ "$crondisabled" ] && [ "$action" != "remove" ] && [ -z "$skip_cron" ]; then
	err1="Error: cron service seems to be disabled. Can not perform action '$action'"
	err2="On Debian and derivatives, enable the cron service with 'systemctl enable cron.service'. Exiting."
	die 1 "$err1" "$err2"
fi

[ -n "$cron_schedule" ] && [ -n "$skip_cron" ] && \
	die 1 "Error: Conflicting arguments. Use either -s or -n but not both."

if [ ! "$skip_cron" ]; then
	# if cron_schedule wasn't provided in args, use the schedule from the config file
	if [ -z "$cron_schedule" ]; then
		debugprint "Reading cron schedule from the config..."
		cron_schedule="$(getconfig "Cron_schedule" "$conf_file")"
		debugprint "Read cron schedule: $cron_schedule"
	fi

	# validate cron schedule
	debugprint "Validating cron schedule: '$cron_schedule'."
	validate_cron_schedule.sh -x "$cron_schedule" "$debug"; rv=$?
	if [ "$rv" -ne 0 ]; then
		die 1 "Error validating cron schedule '$cron_schedule'. Exiting."
	else
		debugprint "Successfully validated cron schedule: '$cron_schedule'."
	fi
else
	debugprint "Skipping cron schedule validation."
fi


#### MAIN

### Read current set of countries from the the config file into config_tlds
config_tlds="$(getconfig "Countries" "$conf_file")"

debugprint "Countries in initial config: '$config_tlds'"

# re-create tlds_status_file
echo "" > "$tlds_status_file"

case "$action" in

	add)
		# merge $config_tlds with $tlds_arg while removing duplicates
		new_tlds="$(echo "$config_tlds $tlds_arg" | tr " " "\n" | sort -ibu |  tr "\n" " ")"
		# trim leading, trailing, and extra in-between whitespaces
		new_tlds="$(awk '{$1=$1};1' <<< "$new_tlds")"

		if [ -z "$forceadd" ]; then
			# remove any entries already found in config_tlds from tlds_arg and assign to tlds_to_change
			tlds_to_change="$(remove_a_from_b "$config_tlds" "$tlds_arg")"
			# find which tlds were specified for removal but don't exist

			wrong_tlds="$(find_lists_difference "$tlds_to_change" "$tlds_arg")"
			[ -n "$wrong_tlds" ] && echo "NOTE: countries '$wrong_tlds' have already been added." >&2
		else
			tlds_to_change="$tlds_arg"
		fi
	;;
	remove)
		# find duplicate-free intersection between config_tlds and tlds_arg
		tlds_to_change="$(find_lists_intersection "$config_tlds" "$tlds_arg")"
		debugprint "tlds to remove: '$tlds_to_change'"

		# find which tlds were specified for removal but don't exist
		wrong_tlds="$(find_lists_difference "$tlds_to_change" "$tlds_arg")"
		[ -n "$wrong_tlds" ] && echo "NOTE: countries '$wrong_tlds' have not been added, so can not remove." >&2

		# remove any entries found in tlds_to_change from config_tlds and assign to new_tlds
		new_tlds="$(remove_a_from_b "$tlds_to_change" "$config_tlds")"
		# trim leading, trailing, and extra in-between whitespaces
		new_tlds="$(awk '{$1=$1};1' <<< "$new_tlds")"
	;;
esac

# TODO: Add checks for discrepancy between the config and actual existing ipsets and iptables rules

if [ "$action" = "schedule" ]; then
	debugprint "Note: Skipping the *run script call because specified action was 'schedule'."
else

	if [ -z "$tlds_to_change" ] && [ -z "$forceadd" ]; then
		config_tlds="$(getconfig "Countries" "$conf_file")"
		echo "Countries in final config: '$config_tlds'."
		die 254 "Nothing to do, exiting."
	fi

	debugprint "planned tlds before '$action': '$new_tlds'"

	# if new_tlds list is empty
	[ -z "$new_tlds" ] && \
		die 1 "Planned final countries list is empty! If you really want to block evrything, do this manually. Exiting."


	### Call the *run script
	$run_command -o "$debug" "$nodrop" -a "$action" -c "$tlds_to_change"; rv=$?

	# 254 return code means fetch failure
	if [ $rv -eq 254 ]; then
		# read failed tlds from file
		failed_tlds="$(getconfig "FailedTLDs" "$tlds_status_file")"
		echo "Error performing action '$action' for countries '$failed_tlds'." >&2

	# positive return code means apply failure or another permanent error, except for 254
	elif [ $rv -gt 0 ] && [ $rv -ne 254 ]; then
		echo "Error performing action '$action' for countries '$tlds_to_change'." >&2

		if [ -z "$config_tlds" ]; then
			die 1 "Can not restore previous countries set because it is not found in the config file."
		fi

		# restore old countries set in the config file
		echo "Re-applying previous countries set: '$config_tlds'... "
		$run_command "$debug" "$nodrop" -a "update"; rv=$?
		if [ $rv -eq 0 ]; then
			die 0 "Successfully re-applied previous countries set."
		else
			echo "Failed to re-apply previous countries set." >&2
			# call the *backup script to initiate recovery from fault
			${suite_name}-backup -r "$debug"; rv=$?

			# exit with the same exit code as backup-restore operation
			die "$?" ""
		fi
	fi

	if [ "$action" = "add" ]; then
			# read action results from the status file
			ok_tlds="$(getconfig "OkTLDs" "$tlds_status_file")"
			failed_tlds="$(getconfig "FailedTLDs" "$tlds_status_file")"
			new_tlds="$config_tlds $ok_tlds"
	fi

	# remove duplicates and trim leading, trailing, and extra in-between whitespaces
	new_tlds="$(echo "$new_tlds" | tr " " "\n" | sort -ibu |  tr "\n" " " | awk '{$1=$1};1' )"

	# if all 'add' actions failed
	if [ -z "$(find_lists_difference "$tlds_to_change" "$failed_tlds")" ]; then
		debugprint "tlds_arg: '$tlds_arg'"
		debugprint "failed_tlds: '$failed_tlds'"
		die 1 "All actions failed."
	fi

	setconfig "Countries" "$conf_file" "$new_tlds"; rv=$?
	[ "$rv" -ne 0 ] && die 1 "Failed to write new set of tlds '$new_tlds' to config file '$conf_file'."

	config_tlds="$(getconfig "Countries" "$conf_file")"
	echo "Countries in final config: '$config_tlds'."
fi


### Cron jobs management

## Read current cron jobs into variable
	curr_cron_jobs="$(crontab -u root -l 2>/dev/null | grep "\"$run_command\"")"
	debugprint "Current cron jobs: $curr_cron_jobs"

## Remove current cron jobs
echo ""
echo "Removing cron jobs for ${suite_name}..."
crontab -u root -l 2>/dev/null | grep -v "\"$run_command\"" | sudo crontab -u root -


# If action is "remove", don't assume that persistence is required
# Only create new cron jobs if prior cron jobs exist
[ "$action" = "remove" ] && [ -z "$curr_cron_jobs" ] && skip_cron="true"

if [ ! "$skip_cron" ]; then

	# check that countries list in config is not empty
	config_tlds="$(getconfig "Countries" "$conf_file")"

	if [ -z "$config_tlds" ]; then
		die 1 "Error: Countries list in the config file is empty! No point in creating cron jobs."
	else

		### Create cron jobs

		echo ""
		echo -n "Creating periodic cron job with schedule '$cron_schedule'... "
		echo -e "$(sudo crontab -u root -l 2>/dev/null)\n$cron_schedule \"$run_command\" $nodrop -a update &>/dev/null" | sudo crontab -u root -
		rv=$?

		if [ $rv -ne 0 ]; then
			die 1 "Error running the crontab command."
		else
			echo "Ok."
			cron_line_result=$(crontab -u root -l 2>/dev/null |  grep  "\"$run_command\"")
			debugprint "Cron line: '$cron_line_result'"
		fi

		echo -n "Creating reboot cron job... "

		# using the -s switch for the *run script to skip fetching at reboot
		## otherwise if there was no internet connection at reboot time, *fetch would fail which would cause *run to fail,
		## so *apply wouldn't run, which would leave the system without geoblocking rules
		echo -e "$(sudo crontab -u root -l 2>/dev/null)\n@reboot sleep $sleeptime && \"$run_command\" $nodrop  -a update -s &>/dev/null" | \
                	sudo crontab -u root -; rv=$?

		if [ $rv -ne 0 ]; then
			die 1 "Error running the crontab command."
		else
			echo "Ok."
			cron_line_result="$(crontab -u root -l 2>/dev/null |  grep "reboot sleep .* && \"$run_command\"")"
			debugprint "Reboot cron line: '$cron_line_result'"
		fi

		# save cron schedule to the config file
		setconfig "Cron_schedule" "$conf_file" "$cron_schedule"
	fi
else
	echo "NOTE: Skipping cron jobs creation."
fi
echo ""

# call the backup script
[[ "$action" = "add" || "$action" = "remove" ]] && ${suite_name}-backup "$debug" -b


echo ""
echo "View iptables rules with 'sudo iptables -L'"
echo "View cron jobs with 'sudo crontab -l'"
echo

debugexitmsg

unset nolog

exit 0
