#!/usr/bin/env bash

# geoblocker_bash-manage

# Provides an interface to configure geoblocking.

# Supported actions: add, remove, schedule.

# 'geoblocker_bash-manage -a add|remove -c <country_code>' :
#     Adds or removes the specified country codes (tld's) to/from the config file.
#     Calls the -run script to fetch and apply the whitelists.

# 'geoblocker_bash-manage -a schedule'
#     Calls the -cronsetup script to configure cron jobs.
#     Cron jobs implement persistence and automatic list updates.
#     Accepts cron schedule expression as an argument.

# 'geoblocker_bash-manage -a schedule -s <schedule_expression>' : enables persistence
#     and configures the schedule for the periodic cron job.
# 'geoblocker_bash-manage -a schedule -s disable' : disables persistence.


#### Initial setup

me=$(basename "$0")
suite_name="geoblocker_bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'."; exit 1; }

source "$script_dir/${suite_name}-common" || { echo "Error: Can't find ${suite_name}-common."; exit 1; }
# **NOTE** that some functions and variables are sourced from the *common script

# sanitize arguments
sanitize_args "$@"
# replace arguments with sanitized ones
set -- "${arguments[@]}"

#### USAGE

usage() {
    cat <<EOF

$me
    Provides an interface to configure geoblocking.
 
WARNING: if removing a whitelist: Geoblocking will remain active after removal.
         If you remove your country's whitelist, you may lose remote access to your system.


Usage: $me -a <action> [-c "[tld] [tld] ... [tld]"] [-s <"sch_expression"|disable>] [-d] [-h]

Options:
    -a add|remove|schedule        : action to perform: add or remove ipsets, iptables rules and cron jobs
                                       or "schedule" to change the cron schedule (has no effect on iptables rules).

    -c "tld(s)"                   : tld / country codes. if passing multiple country codes, use double quotes.
    -s <"sch_expression">|disable : schedule expression for the periodic cron job, must be inside double quotes.
                                       "disable" removes cron jobs and turns off persistence.

    -f                            : Force the 'add' action even if specified country has been already added.

    -d                            : Debug
    -h                            : This help

EOF
}


#### PARSE ARGUMENTS
while getopts "a:c:s:fdh" opt; do
	case $opt in
		a) action=$OPTARG;;
		c) tlds_arg=$OPTARG;;
		s) cron_schedule=$OPTARG;;
		f) forceadd="true";;
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; exit 1;;
	esac
done
shift $((OPTIND -1))

echo

# get debugmode variable from either the args or environment variable, depending on what's set
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg


#### FUNCTIONS

find_lists_intersection() {
# finds duplicates-free intersection between space-delimited fields in input strings $1 and $2,
#      and outputs the intersection as a string

	str1="$1"; str2="$2"
	result_str="$(comm -12 <(echo "$str1" | tr ' ' '\n' | sort -u) \
                        <(echo "$str2" | tr ' ' '\n' | sort -u) | tr '\n' ' ')"
	# trim leading, trailing, and extra in-between whitespaces
	result_str="$(awk '{$1=$1};1' <<< "$result_str")"
	echo "$result_str"
}

find_lists_difference() {
# finds space-delimited fields that exist in strings $1 or $2 but not both
#      and outputs the difference as a string

	str1="$1"; str2="$2"
	result_str="$(comm -3 <(echo "$str1" | tr ' ' '\n' | sort -u) \
                        <(echo "$str2" | tr ' ' '\n' | sort -u) | tr '\n' ' ')"
	# trim leading, trailing, and extra in-between whitespaces
	result_str="$(awk '{$1=$1};1' <<< "$result_str")"
	echo "$result_str"
}

remove_a_from_b() {
# removes all space-delimited fields found in string $1 from string $2, outputs the result as a string

	str1="$1"; str2="$2"
	while read -r field_str; do
		str2="${str2//$field_str/}"
	done < <(echo "$str1" | tr ' ' '\n' )
	# trim leading, trailing, and extra in-between whitespaces
	str2="$(awk '{$1=$1};1' <<< "$str2")"
	echo "$str2"
}

#### VARIABLES

# set environment variable "nolog" to avoid daughter scripts writing errors
#	to syslog when encountering incorrect arguments from the user
#	nolog variable is checked in the sourced *common script
export nolog="true"

# get install_dir from the config file
install_dir="$(getconfig "Installdir")"; rv=$?

#convert to lower case
tlds_arg="${tlds_arg,,}"
action="${action,,}"

run_command="${install_dir}/${suite_name}-run"

# get datadir from the config file
datadir="$(getconfig "Datadir")"

tlds_status_file="$datadir/tlds_status"


#### CHECKS

# check for root
[ "$EUID" -ne 0 ] && die 1 "This needs to be run as root."

# check that the config file exists
[ ! -f "$conf_file" ] && die "Config file '$conf_file' doesn't exist! Run the installation script again."

## Check arguments for sanity

# check for valid action

[ -z "$action" ] && { usage; die 1 "Specify action with '-a <action>'!"; }

case "$action" in
	add) ;;
	remove) ;;
	schedule) ;;
	*) die 1 "Error: unsupported action '$action'." ;;
esac

[[ ("$action" == "add" || "$action" == "remove") && -z "$tlds_arg" ]] && \
	die 1 "Error: action '$action' requires to specify countries with '-c <tlds>'!"

[[ "$action" == "schedule" && ( -n "$tlds_arg" || -n "$forceadd" ) ]] && \
	die 1 "Action '$action' only supports changing the cron schedule! Do not use it with any option except '-s' or '-d' !"

[ "$action" != "schedule" ] && [ -n "$cron_schedule" ] && {
	msg1="Error: the '-s <\"cron_schedule\">' option only works with the \"schedule\" action."
	msg2="To set up cron schedule, use '$me -a schedule -s <\"cron_schedule\">'"
	usage
	die "$msg1" "$msg2";
}

#### MAIN

### Read current set of countries from the the config file into config_tlds
config_tlds="$(getconfig "Countries")"

debugprint "Countries in initial config: '$config_tlds'"

# re-create tlds_status_file
echo "" > "$tlds_status_file"

case "$action" in

	add)
		# merge $config_tlds with $tlds_arg while removing duplicates
		new_tlds="$(echo "$config_tlds $tlds_arg" | tr " " "\n" | sort -ibu |  tr "\n" " ")"
		# trim leading, trailing, and extra in-between whitespaces
		new_tlds="$(awk '{$1=$1};1' <<< "$new_tlds")"

		if [ -z "$forceadd" ]; then
			# remove any entries already found in config_tlds from tlds_arg and assign to tlds_to_change
			tlds_to_change="$(remove_a_from_b "$config_tlds" "$tlds_arg")"
			# find which tlds were specified for removal but don't exist

			wrong_tlds="$(find_lists_difference "$tlds_to_change" "$tlds_arg")"
			[ -n "$wrong_tlds" ] && echo "NOTE: countries '$wrong_tlds' have already been added." >&2
		else
			tlds_to_change="$tlds_arg"
		fi
	;;
	remove)
		# find duplicate-free intersection between config_tlds and tlds_arg
		tlds_to_change="$(find_lists_intersection "$config_tlds" "$tlds_arg")"
		debugprint "tlds to remove: '$tlds_to_change'"

		# find which tlds were specified for removal but don't exist
		wrong_tlds="$(find_lists_difference "$tlds_to_change" "$tlds_arg")"
		[ -n "$wrong_tlds" ] && echo "NOTE: countries '$wrong_tlds' have not been added, so can not remove." >&2

		# remove any entries found in tlds_to_change from config_tlds and assign to new_tlds
		new_tlds="$(remove_a_from_b "$tlds_to_change" "$config_tlds")"
		# trim leading, trailing, and extra in-between whitespaces
		new_tlds="$(awk '{$1=$1};1' <<< "$new_tlds")"
	;;
esac

# TODO: Add checks for discrepancy between the config and actual existing ipsets and iptables rules

if [ "$action" = "schedule" ]; then
	debugprint "Skipping the *run script call because specified action was 'schedule'."
else

	if [ -z "$tlds_to_change" ] && [ -z "$forceadd" ]; then
		config_tlds="$(getconfig "Countries")"
		echo "Countries in final config: '$config_tlds'."
		die 254 "Nothing to do, exiting."
	fi

	debugprint "planned tlds after '$action': '$new_tlds'"

	# if new_tlds list is empty
	[ -z "$new_tlds" ] && \
		die 1 "Planned final countries list is empty! If you really want to block evrything, do this manually."


	### Call the *run script
	$run_command -o -a "$action" -c "$tlds_to_change"; rv=$?

	# 254 return code means fetch failure
	if [ $rv -eq 254 ]; then
		# read failed tlds from file
		failed_tlds="$(getconfig "FailedTLDs" "$tlds_status_file")"
		echo "Error performing action '$action' for countries '$failed_tlds'." >&2

	# positive return code means apply failure or another permanent error, except for 254
	elif [ $rv -gt 0 ] && [ $rv -ne 254 ]; then
		echo "Error performing action '$action' for countries '$tlds_to_change'." >&2

		if [ -z "$config_tlds" ]; then
			die 1 "Can not restore previous countries set because it is not found in the config file."
		fi

		# restore old countries set in the config file
		echo "Re-applying previous countries set: '$config_tlds'... "
		$run_command -a "update"; rv=$?
		if [ $rv -eq 0 ]; then
			die 0 "Successfully re-applied previous countries set."
		else
			echo "Failed to re-apply previous countries set." >&2
			# call the *backup script to initiate recovery from fault
			${suite_name}-backup -a restore; rv=$?

			# exit with the same exit code as backup-restore operation
			die "$?" ""
		fi
	fi

	if [ "$action" = "add" ]; then
			# read action results from the status file
			ok_tlds="$(getconfig "OkTLDs" "$tlds_status_file")"
			failed_tlds="$(getconfig "FailedTLDs" "$tlds_status_file")"

			# get actual new tld's from old + successfully fetched&applied tlds
			new_tlds="$config_tlds $ok_tlds"
	fi

	# remove duplicates and trim leading, trailing, and extra in-between whitespaces
	new_tlds="$(echo "$new_tlds" | tr " " "\n" | sort -ibu |  tr "\n" " " | awk '{$1=$1};1' )"

	# if all 'add' actions failed
	if [ -z "$(find_lists_difference "$tlds_to_change" "$failed_tlds")" ]; then
		debugprint "tlds_arg: '$tlds_arg'"
		debugprint "failed_tlds: '$failed_tlds'"
		die 1 "All actions failed."
	fi

	setconfig "Countries" "$new_tlds"; rv=$?
	[ "$rv" -ne 0 ] && die 1 "Failed to write new set of tlds '$new_tlds' to config file '$conf_file'."

	config_tlds="$(getconfig "Countries")"
	echo "Countries in final config: '$config_tlds'."
fi


### Cron jobs management

if [ "$action" != "schedule" ]; then
	debugprint "Skipping cron setup because action is not 'schedule'."
else

	# translate *manage arguments into *cronsetup arguments
	# can't send empty $cron_schedule argument because of getopts issues with empty arguments
	if [ "$cron_schedule" = "disable" ]; then
		cron_action="disable"
		cron_schedule="disable"
	else cron_action="apply"
	fi

	[ -z "$cron_schedule" ] && cron_schedule="disable"

	# check that countries list in config is not empty
	config_tlds="$(getconfig "Countries")"

	if [ -z "$config_tlds" ]; then
		die 1 "Error: Countries list in the config file is empty! No point in creating cron jobs."
	else
		${suite_name}-cronsetup -a "$cron_action" -s "$cron_schedule"
	fi

	echo
fi

### Backup

# call the backup script
[[ "$action" = "add" || "$action" = "remove" ]] && ${suite_name}-backup -a backup


echo ""
echo "View iptables rules with 'sudo iptables -L'"
echo "View cron jobs with 'sudo crontab -l'"
echo

debugexitmsg

exit 0
