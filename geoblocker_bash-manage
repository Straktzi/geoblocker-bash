#!/usr/bin/env bash

# geoblocker_bash-manage

# Allows to add or remove a whitelist for specified countries to/from geoblocking rules
#       and creates or updates associated cron jobs

me=$(basename "$0")
parent_script="$(ps -o args= $PPID | awk -v RS='/| ' '/^geoblocker/')"
args="$@"

#### USAGE

usage() {
    cat <<EOF

$me
    Allows to add or delete whitelists for specified countries to/from geoblocking rules
        and creates or updates associated cron jobs.

WARNING: if removing a whitelist: Geoblocking will remain active after removal.
         If you remove your country's whitelist, you may lose remote access to your system.


    Usage: $me -a <add|remove|schedule> [-c "[tld] [tld] ... [tld]"] [-s "schedule"] [-n] [-p] [-d] [-h]

    Options:
        -a action       : action to perform: "add" or "remove" associated rules and cron jobs
                          or "schedule" to change the cron schedule without changing iptables rules

        -c "tld(s)"     : tld / country codes. if passing multiple country codes, use double quotes
        -s "schedule"   : schedule expression for the periodic cron job, must be inside double quotes

        -n              : No persistence (skip creating cron jobs)
        -p              : No Drop: applies the config but skips setting INPUT chain default policy to DROP
                                   (continue to accept all connections)
        -d              : Debug
        -h              : This help

EOF
}

#### PARSE ARGUMENTS
while getopts "a:c:s:npdh" opt; do
	case $opt in
		a) action=$OPTARG;;
		c) tlds=$OPTARG;;
		s) cron_schedule=$OPTARG;;
		n) skip_cron=true;;
		p) nodrop="-p";;
		d) debug="-d";;
		h) usage; exit 0;;
		\?) usage; exit 1;;
	esac
done
shift $((OPTIND -1))


#### FUNCTIONS

debugprint() {
# prints a debug message
	[ "$debug" ] && echo -e "    Debug: $@"
}

echo ""
debugprint "\033[1;33mStarted *manage with args: '$args'\033[0m"

die() {
    if [ -n "$@" ]; then
        echo ""
		# loop through arguments and print them to stderr and to the syslog
        for arg in "$@"; do
            echo "$arg" 1>&2
            logger -t "$me" "$arg"
        done
    fi
    [ -n "$parent_script" ] && debugprint "\033[1;33mBack to $parent_script...\033[0m"
    echo ""
    exit 1
}

get_script_dir() {
	SOURCE=${BASH_SOURCE[0]}
	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
		SOURCE=$(readlink "$SOURCE")
		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
		# if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	echo "$DIR"
}

getconfig() {
# reads a field named $1 from the config file $2
# outputs the resulting field
# returns 0 if successful, 1 if not
	fieldname="$1"
	configfile="$2"
	if [ -z "$fieldname" ] || [ -z "$configfile" ]; then return 1; fi
	read -r field < <(grep "$fieldname=" "$configfile" | sed "s/.*$fieldname=//"); rv=$?
	if [ -z "$field" ]; then
		echo ""
		rv=$((rv + 1))
	else
		echo "$field"
	fi
	return $rv
}

setconfig() {
# changes a field named $1 in the config file $2 to value $3
# returns 0 if successful, 1 if not
	fieldname="$1"
	configfile="$2"
	field="$3"
	if [ -z "$fieldname" ] || [ -z "$configfile" ]; then return 1; fi

	# remove corresponding config line
	cat "$configfile" | grep -v "$fieldname=" > "${configfile}.temp"
	mv "${configfile}.temp" "$configfile"

	# add updated config line
	echo -e "$fieldname=$field" >> "$configfile"; rv=$?
	return $rv
}

#### VARIABLES

#convert country codes to lower case
tlds="$(echo ${tlds,,})"

conf_dir="/etc/geoblocker_bash"
conf_file="${conf_dir}/geoblocker_bash.conf"

# get datadir from the config file
read -r datadir < <(getconfig "Datadir" "$conf_file")

preinstall_policies_file="$datadir/preinstall_policies.bak"
knowngood_file="$datadir/iptables_knowngood.bak"
whitelist_dir="$datadir/ip_lists"
tlds_status_file="$datadir/tlds_status"

# get sleeptime (for reboot) from the config file
read -r sleeptime < <(getconfig "RebootSleepTime" "$conf_file")

# get the script path
read -r scriptdir < <(get_script_dir)

run_command="${scriptdir}/geoblocker_bash-run"


#### CHECKS

# TODO: test empty "action" etc

# check for root
if [ "$EUID" -ne 0 ]; then
  die "This needs to be run as root."
fi

# check if cron service is enabled
(systemctl is-enabled cron.service) > /dev/null; rv=$?
if [ $rv -ne 0 ]; then crondisabled="true"; fi


# Check the passed arguments for sanity

if [ -z "$action" ]; then
	usage
	die "Specify action with '-a <action>'!"
fi

if [ "$action" != "schedule" ] && [ -z "$tlds" ]; then
	die "Error: action '$action' requires to specify countries with '-c <tlds>'!"
fi

if [ "$action" = "schedule" ] && [ -n "$tlds" ]; then
	die "Error: action '$action' only supports changing the cron schedule! Do not use it with the '-c' option!"
fi

if [ "$action" = "schedule" ] && [ -n "$skip_cron" ]; then
	die "Error: action '$action' is incompatible with option '-n'!"
fi

if [ "$action" = "schedule" ] && [ -z "$cron_schedule" ]; then
	die "Error: action '$action' requires to provide cron schedule with option '-s'!"
fi

if [ "$action" = "schedule" ] && [ -n "$nodrop" ]; then
	die "Error: action '$action' is for setting the cron schedule only, don't use it with '-p'!"
fi

case "$action" in
	add) ;;
	remove) ;;
	schedule) ;;
	\?) usage; die "Error: unsupported action '$action'.";;
esac

if [[ "$crondisabled" ]] && [ "$action" != "remove" ] && [ -z "$skip_cron" ]; then
	err1="Error: cron service seems to be disabled. Can not perform action '$action'"
	err2="On Debian and derivatives, enable the cron service with 'systemctl enable cron.service'. Exiting."
	die "$err1" "$err2"
fi

if [ -n "$cron_schedule" ] && [ -n "$skip_cron" ]; then
	die "Error: Conflicting arguments. Use either -s or -n but not both."
fi

# cd into script directory
# exit in case "cd" fails
cd "$scriptdir"; rv=$?
if [ -z "$scriptdir" ] || [ "$rv" -ne 0 ]; then die "Error: could not change directory to '$scriptdir'. Exiting."; fi

if [ ! "$skip_cron" ]; then

	# if cron_schedule wasn't provided in args, use the schedule from the config file
	if [ -z "$cron_schedule" ]; then
		read -r cron_schedule < <(getconfig "Cron_schedule" "$conf_file")
	fi

	# validate cron schedule
	debugprint "Validating cron schedule: '$cron_schedule'."
	read -r cron_schedule < <(validate_cron_schedule.sh $debug -x "$cron_schedule"); rv=$?
	if [ $rv -ne 0 ]; then
		die "Error validating cron schedule '$cron_schedule'. Exiting."
	else
		debugprint "Successfully validated cron schedule: '$cron_schedule'."
	fi
else
	debugprint "Skipping cron schedule validation."
fi


#### MAIN

### Read current set of countries from the the config file into array config_tlds
config_tlds=( $(getconfig "Countries" "$conf_file") )
debugprint "Countries in initial config: ${config_tlds[@]}"

# Get new set of countries from the argument into array arg_tlds
arg_tlds=( $(echo "$tlds") )

case "$action" in
# some fairly ugly array-to-string-and-back conversions but appears to be the most straightforward way to do this

	add)
		# merge config_tlds and arg_tlds arrays into new_tlds array while removing duplicates
		new_tlds=( $(printf '%s\n'  "${config_tlds[@]}" "${arg_tlds[@]}" | sort -ibu) )

		# convert to string
		tlds_to_change_str="${arg_tlds[@]}"

		# tlds_to_change should contain countries that are not already in config_tlds
		# compare $item with every element of tlds_to_change and remove exact matches in tlds_to_change
		for item in "${config_tlds[@]}"; do
			tlds_to_change_str="${tlds_to_change_str//$item/}"
		done
		# convert to array while removing duplicates
		tlds_to_change=( $(echo "$tlds_to_change_str" | sort -ibu) )
		if [ -z "$(echo ${tlds_to_change[@]})" ]; then
			die "Error: can not add countries '${arg_tlds[@]}' because they have already been added."
		fi
	;;
	remove)
		# convert to string
		new_tlds_str="${config_tlds[@]}"

		# compare $item with every element of new_tlds_str and remove exact matches in new_tlds_str
		for item in "${arg_tlds[@]}"; do
			new_tlds_str="${new_tlds_str//$item/}"
		done

		# convert to array while removing duplicates
		new_tlds=( $(echo "$new_tlds_str" | sort -ibu) )

		# find duplicate-free intersection between {config_tlds[@]} and {arg_tlds[@]} so later we know what countries to remove
		read -r -d '' -a tlds_to_change < <(join <(printf %s\\n "${config_tlds[@]}" | sort -u) \
                          <(printf %s\\n "${arg_tlds[@]}" | sort -u))

		if [ -z "$(echo ${tlds_to_change[@]})" ]; then
			die "Error: can not remove countries '${arg_tlds[@]}' because they have not been added."
		fi
	;;
esac

if [ "$action" = "schedule" ]; then
	debugprint "Note: Skipping the *run script call because specified action was 'schedule'."
else
	setconfig "Countries" "$conf_file" "$(echo ${new_tlds[@]})"; rv=$?
	if [ $rv -ne 0 ]; then
		die "Error writing new config for countries '${new_tlds[@]}' to file '$conf_file'."
	fi

	# re-create tlds_status_file
	echo "" > "$tlds_status_file"

	### Call the *run script

	$run_command $debug $nodrop -a "$action" -c "$(echo ${tlds_to_change[@]})"; rv=$?

	# 254 return code means fetch failure
	if [ $rv -eq 254 ]; then
		# read failed tlds from file into array failed_tlds
		failed_tlds=( $(getconfig "FailedTLDs" "$tlds_status_file") )
		echo "Error performing action '$action' for countries '${failed_tlds[@]}'."

	# positive return code means apply failure or another permanent error, except for 254
	elif [ $rv -gt 0 ] && [ $rv -ne 254 ]; then
		echo "Error performing action '$action' for countries '${tlds_to_change[@]}'."

		if [ -z "$(echo ${config_tlds[@]})" ]; then
			die "Can not restore previous countries set because it is not found in the config file."
		fi

		# restore old countries set in the config file
		echo -n "Restoring previous countries set: '${config_tlds[@]}'..."
		setconfig "Countries" "$conf_file" "${config_tlds[@]}"
		$run_command $debug $nodrop -a "update"; rv=$?
		if [ $rv -eq 0 ]; then
			echo "Ok."
			err="Successfully restored previous countries set from backup."
		else
			echo "Failed."
			err="Failed to restore previous countries set from backup."
		fi
		die "$err"
	fi

	if [ "$action" = "add" ]; then
		# store successfully fetched and applied tlds in array ok_tlds
		ok_tlds=( $(getconfig "OkTLDs" "$tlds_status_file") )
		new_tlds_str="$(echo ${config_tlds[@]}) $(echo ${ok_tlds[@]})"

		# add successfully fetched and applied tlds list to config file, effectively removing failed tlds (if any) from config
		setconfig "Countries" "$conf_file" "$new_tlds_str"; rv=$?
	fi
fi

### Cron jobs management

## Read current cron jobs into variable
	read -r curr_cron_jobs < <(crontab -u root -l 2>/dev/null | grep "\"$run_command\"")
	debugprint "Current cron jobs: $curr_cron_jobs"

## Remove current cron jobs
echo ""
echo "Removing cron jobs for geoblocker_bash..."
crontab -u root -l 2>/dev/null | grep -v "\"$run_command\"" | sudo crontab -u root -


# If action is "remove", don't assume that persistence is required
# Only create new cron jobs if prior cron jobs exist
if [ "$action" = "remove" ] && [ -z "$curr_cron_jobs" ]; then
	skip_cron="true"
fi


if [ ! "$skip_cron" ]; then

	# check that countries list in config is not empty
	read -r config_tlds < <(getconfig "Countries" "$conf_file")

	if [ -z "$config_tlds" ]; then
		die "Error: Countries list in the config file is empty! No point in creating cron jobs."
	else
		echo "Countries in final config: '$config_tlds'."

		### Create cron jobs

		echo ""
		echo -n "Creating periodic cron job with schedule '$cron_schedule'... "
		echo -e "$(sudo crontab -u root -l 2>/dev/null)\n$cron_schedule \"$run_command\" $nodrop -a update &>/dev/null" | sudo crontab -u root -
		rv=$?

		if [ $rv -ne 0 ]; then
			die "Error running the crontab command."
		else
			echo "Ok."
			cron_line_result=$(crontab -u root -l 2>/dev/null |  grep  "\"$run_command\"")
			debugprint "Cron line: '$cron_line_result'"
		fi

		echo -n "Creating reboot cron job... "

		# using the -s switch for the *run script to skip fetching at reboot
		## otherwise if there was no internet connection at reboot time, *fetch would fail which would cause *run to fail,
		## so *apply wouldn't run, which would leave the system without geoblocking rules
		echo -e "$(sudo crontab -u root -l 2>/dev/null)\n@reboot sleep $sleeptime && \"$run_command\" $nodrop  -a update -s &>/dev/null" | \
                	sudo crontab -u root -; rv=$?

		if [ $rv -ne 0 ]; then
			die "Error running the crontab command."
		else
			echo "Ok."
			cron_line_result=$(crontab -u root -l 2>/dev/null |  grep "reboot sleep .* && \"$run_command\"")
			debugprint "Reboot cron line: '$cron_line_result'"
			echo ""
			echo "View cron jobs with 'sudo crontab -l'"
		fi

		# save cron schedule to the config file
		setconfig "Cron_schedule" "$conf_file" "$cron_schedule"
	fi
else
	echo "NOTE: Skipping cron jobs creation."
fi

echo ""
echo "View iptables rules with 'sudo iptables -L'"
echo ""

[ -n "$parent_script" ] && debugprint "\033[1;33mBack to $parent_script...\033[0m"

exit 0
