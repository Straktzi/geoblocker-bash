#!/usr/bin/env bash

# geoblocker_bash-manage

# Allows to add or remove a whitelist for specified countries to/from geoblocking rules
#       and creates or updates associated cron jobs

me=$(basename "$0")

#### USAGE

usage() {
    cat <<EOF

This script:
    Allows to add or delete whitelists for specified countries to/from geoblocking rules
        and creates or updates associated cron jobs.

WARNING if removing a whitelist: Geoblocking will remain active after removal.
        If you remove your country's whitelist, you may lose remote access to your system.
        

    Usage: $me -c <"tld [tld] ... [tld]"> -a <add|remove> [-s "<schedule>"] [-n] [-p] [-d] [-h]

    Options:
        -c <tld>        : tld / country codes. if passing multiple country codes, use double quotes
        -a <action>     : action to perform: "add" or "remove" associated rules and cron jobs
        -s "<schedule>" : schedule expression for the cron job, must be inside double quotes

        -n              : No persistence (skip creating cron jobs)
        -p              : No Drop: applies the config but skips setting INPUT chain default policy to DROP.
                                   (continue to accept all connections)
        -d              : Debug
        -h              : This help

EOF
}

#### PARSE ARGUMENTS

while getopts "c:a:s:npdh" opt; do
	case $opt in
		c) countries=$OPTARG;;
		a) action=$OPTARG;;
		s) cron_schedule=$OPTARG;;
		n) skip_cron=true;;
		p) nodrop="-p";;
		d) debug="-d";;
		h) usage; exit 0;;
		\?) usage; exit 1;;
	esac
done
shift $((OPTIND -1))

# TODO: implement nodrop in *run and *apply, and possibly in *install

#### Functions

get_script_dir () {
	SOURCE=${BASH_SOURCE[0]}
	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
		SOURCE=$(readlink "$SOURCE")
		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
		# if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
	echo "$DIR"
}

getconfig() {
# reads a field named $1 from the config file $2
# outputs the resulting field
# returns 0 if successful, 1 if not
	fieldname="$1"
	configfile="$2"
	read -r field < <(grep "$fieldname=" "$conf_file" | sed 's/.*$fieldname=//'); rv=$?
	if [ -z "$field" ]; then
		echo ""
		rv=$((rv + 1))
	else
		echo "$field"
	fi
	return $rv
}

setconfig() {
# changes a field named $1 in the config file $2 to value $3
# returns 0 if successful, 1 if not
	fieldname="$1"
	configfile="$2"
	field="$3"
	# remove corresponding config line
	grep -v "$fieldname=" "$conf_file" > "$conf_file"
	# add updated config line
	echo -e "$(cat "$conf_file")\n$fieldname=$field" > "$conf_file"; rv=$?
	debugpr "New config line: $(getconfig $fieldname $configfile)"
	return $rv
}

debugpr() {
# prints a debug message
	[ "$debug" ] && echo "Debug: $@"
}

#### Initialize variables

#convert country codes to lower case
countries=echo "${countries,,}"

# TODO: implement config saving in the *install script

conf_dir="/etc/geoblocker_bash"
conf_file="${conf_dir}/geoblocker_bash.conf"

# get datadir from the config file
read -r datadir < <(getconfig "Datadir" "$conf_file")
preinstall_policies_file="$datadir/preinstall_policies.bak"
knowngood_file="$datadir/iptables_knowngood.bak"
whitelist_dir="$datadir/ip_lists"

# get sleeptime (for reboot) from the config file
read -r sleeptime < <(getconfig "RebootSleepTime" "$conf_file")

# TODO: implement setting sleeptime config in *install and in *manage
# TODO: implement setting datadir config in *install and in *manage

# get the script path
read -r scriptdir < <(get_script_dir)

run_command="${scriptdir}/geoblocker_bash-run"


#### Checks

if [ -z "$countries" ]; then
	usage
	echo "Specify countries with \"-c <countries>\"!"
	echo ""
	exit 1
fi

case "$action" in
	add) ;;
	remove) ;;
	\?) usage; echo "Unsupported action \"$action\"."; exit 1;;
esac

# TODO: test empty "action" etc

if [ -z "$action" ]; then
	usage
	echo "Specify action with \"-a <action>\"!"
	echo ""
	exit 1
fi

# check for root
if [ "$EUID" -ne 0 ]
  then echo "This needs to be run as root."
  exit
fi

# check if cron service is enabled
(systemctl is-enabled cron.service) > /dev/null; rv=$?
if [ $rv -ne 0 ]; then crondisabled="true"; fi

if [[ "$crondisabled" ]] && [ "$action" = "add" ]; then
	echo "Error: cron service seems to be disabled. Can not perform action \"$action\""
	echo "On Debian and derivatives, enable the cron service with \"systemctl enable cron.service\". Exiting." >&2
	echo ""
	exit 1
fi



echo ""


#### MAIN


# cd into script directory
# exit in case "cd" fails
cd "$scriptdir" || echo "Error: could not change directory to \"$scriptdir\". Exiting."; exit 1

if [ ! "$skip_cron" ] && [ "$action" = "add" ]; then

	# if cron_schedule wasn't provided in args, use the default schedule from the config file
	if [ -z "$cron_schedule" ]; then
		cron_schedule=$(getconfig "Default_schedule" "$conf_file")
	fi

	# validate cron schedule
	bash validate_cron_schedule.sh -x "$cron_schedule"; rv=$?
	if [ $rv -ne 0 ]; then
		echo "Error validating cron schedule. Exiting." >&2
		echo ""
		exit 1
	fi
else
	debugpr "Skipping cron schedule validation."
fi


#### Main

### Get current set of countries from the the config file into array curr_countries
curr_countries=( $(getconfig "$Countries" "$conf_file") )
debugpr "Current countries in config: \"$curr_countries\"."


# Get new set of countries from the argument into array arg_countries
arg_countries=( $(echo "$countries") )
debugpr "Countries in arguments: \"$arg_countries\"."

case "$action" in
# some fairly ugly array-to-string-and-back conversions but appears to be the most straightforward way to do this

	add) 
		# merge curr_countries and arg_countries arrays into new_countries array while removing duplicates
		new_countries=( $(printf '%s\n'  "${curr_countries[@]}" "${new_countries[@]}" | sort -ibu) )

		# countries_to_change should contain countries that are not in curr_countries
		countries_to_change_str="$(arg_countries[@])"
		for item in "${curr_countries[@]}"; do
			# compare $item with every element of countries_to_change and remove exact matches in countries_to_change
			countries_to_change_str=${countries_to_change_str//$item/}
		done
		# convert to array while removing duplicates
		countries_to_change=( $(echo "$countries_to_change_str" | sort -ibu) )
		if [ -z "${countries_to_change[@]}"]; then
			echo "Error: can not add countries \"$arg_countries\" because they have already been added."
			echo ""
			exit 1
		fi
	;;
	remove)
		# convert to string
		new_countries_str="${curr_countries[@]}"
		for item in "${arg_countries[@]}"; do
			# compare $item with every element of new_countries_str and remove exact matches in new_countries_str
			new_countries_str=${new_countries_str//$item/}
		done
		# convert to array while removing duplicates
		new_countries=( $(echo "$new_countries_str" | sort -ibu) )

		# find duplicate-free intersection between {curr_countries[@]} and {arg_countries[@]} so later we know what countries to remove
		read -r -d '' -a countries_to_change < <(join <(printf %s\\n "${curr_countries[@]}" | sort -u) \
                          <(printf %s\\n "${arg_countries[@]}" | sort -u))
		if [ -z "${countries_to_change[@]}"]; then
			echo "Error: can not remove countries \"$arg_countries\" because they have not been added."
			echo ""
			exit 1
		fi
	;;
esac

debugpr "Countries to change: ${countries_to_change[@]}"



### Write current cron jobs into variable
	read -r curr_cron_jobs < <(crontab -u root -l 2>/dev/null | grep "\"$run_command\"")
	debugpr "Current cron jobs:"
	debugpr "$curr_cron_jobs"
	debugpr "Current cron jobs exist? $([[ "$curr_cron_jobs" ]] && echo \"yes\" || echo \"no\")."
	debugpr ""

### Remove current cron jobs

echo ""
echo "Removing cron jobs for geoblocker_bash..."
crontab -u root -l 2>/dev/null | grep -v "\"$run_command\"" | sudo crontab -u root -


### Apply the action

# TODO: add -r option to *apply

# Call the *run script
echo $run_command $debug $nodrop -a "$action" -c "${countries_to_change[@]}" | bash; rv=$?

if [ $rv -ne 0 ]; then
	echo ""
	echo "Error performing action \"$action\" for countries \"${countries_to_change[@]}\"."
	exit 1
else
	setconfig "Countries" "$conf_file" "${new_countries[@]}"; rv=$?
	if [ $rv -ne 0 ]; then
		echo ""
		echo "Error writing new config for Countries \"${new_countries[@]}\" to file \"$conf_file\"."
		exit 1
	fi
	debugpr "New countries in config: $(getconfig Countries $conf_file)"
	debugpr "Successfully performed action \"$action\" for countries \"${countries_to_change[@]}\"."
fi


# If action is "remove", don't assume that persistence is required
# Only create new cron jobs if prior cron jobs exist
if [ "$action" = "remove" ] && [ -z "$curr_cron_jobs" ]; then
	skip_cron=true
fi

# If new countries list is empty, skip creating cron jobs
if [ -z "${new_countries[@]}" ]; then
	skip_cron=true
	debugtr "NOTE: New countries list is empty."
fi


if [ ! "$skip_cron" ]; then			

	### Create cron jobs

	debugpr ""
	echo -n "Creating periodic cron job... "
	echo -e "$(sudo crontab -u root -l 2>/dev/null)\n$cron_schedule \"$run_command\" $nodrop -a apply &>/dev/null" | sudo crontab -u root -
	rv=$?

	if [ $rv -ne 0 ]; then
		echo "Error running crontab command." >&2
		echo ""
		exit 1
	else
		echo "Success."
		cron_line_result=$(crontab -u root -l 2>/dev/null |  grep  "\"$run_command\"")
		echo "Cron line: \"$cron_line_result\""
	fi

	debugpr ""
	echo -n "Creating reboot cron job... "

	# using the -s switch for the *run script to skip fetching at reboot
	## otherwise if there was no internet connection at reboot time, *fetch would fail which would cause *run to fail,
	## so *apply wouldn't run, which would leave the system without geoblocking rules
	echo -e "$(sudo crontab -u root -l 2>/dev/null)\n@reboot sleep $sleeptime && \"$run_command\" $nodrop -a apply -s &>/dev/null" | \
                sudo crontab -u root -; rv=$?

	if [ $rv -ne 0 ]; then
		echo "Error running crontab command." >&2
		echo ""
		exit 1
	else
		echo "Success."
		cron_line_result=$(crontab -u root -l 2>/dev/null |  grep "reboot sleep .* && \"$run_command\"")
		echo "Reboot cron line: \"$cron_line_result\""
		echo ""
		echo "View cron jobs with \"sudo crontab -l\""
	fi
else
	echo "NOTE: Skipping cron jobs creation."
fi
