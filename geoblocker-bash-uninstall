#!/bin/bash

# geoblocker-bash-uninstall

# uninstalls the geoblocker-bash suite


#### Initial setup

me=$(basename "$0")

# check for root
[ "$EUID" -ne 0 ] && {
	err="Error: $me needs to be run as root."
	echo "$err" >&2
	exit 1
}

suite_name="geoblocker-bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'. Exiting." >&2; exit 1; }
source "$script_dir/${suite_name}-common" || { echo "Error: Can't find ${suite_name}-common. Exiting." >&2; exit 1; }


#### USAGE

usage() {
    cat <<EOF

$me
1) Deletes associated cron jobs
2) Restores pre-install state of default policies for INPUT and FORWARD chains
3) Deletes associated iptables rules and removes associated ipset
4) Deletes scripts' data folder /var/lib/geoblocker-bash
5) Deletes the scripts from /usr/local/bin


Usage: $me [-d] [-h]

Options:
    -d     : Debug
    -h     : This help

EOF
}

#### PARSE ARGUMENTS

while getopts ":dh" opt; do
	case $opt in
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; echo "Error: Unknown option: '-$OPTARG'." >&2; exit 1;;
	esac
done
shift $((OPTIND -1))

[[ "$*" != "" ]] && {
	usage
	echo "Error in arguments. First unrecognized argument: '$1'." >&2
	exit 1
}

echo

# get debugmode variable from either the args or environment variable, depending on what's set
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg


### Initialize variables
install_dir="/usr/local/bin"

datadir="$(getconfig "Datadir")"; rv=$?
if [ "$rv" -ne 0 ] || [ -z "$datadir" ]; then datadir="/var/lib/${suite_name}"; fi
preinstall_policies_file="$datadir/preinstall_policies.bak"
iptables_comment="$suite_name"

### Delete associated cron jobs
echo "Deleting cron jobs for ${suite_name}..."
crontab -u root -l 2>/dev/null |  grep -v "${suite_name}-run" | sudo crontab -u root -

### Restore pre-install state of default policies for INPUT and FORWARD chains

if [ -f "$preinstall_policies_file" ]; then
	while read -r preinstall_policy; do
		chain_name=$(echo "$preinstall_policy" | cut -f 1 -d " ")
		oldpolicy=$(echo "$preinstall_policy" | cut -f 2 -d " ")
		if [ -n "$chain_name" ] && [ -n "$oldpolicy" ]; then
			echo "Restoring pre-install iptables policy '$oldpolicy' for chain '$chain_name'"
			iptables -P "$chain_name" "$oldpolicy"; rv=$?
			if [ $rv -ne 0 ]; then
				echo "Error $rv trying to change iptables policy with command 'iptables -P $chain_name $oldpolicy'. Exiting." >&2
				exit 1
				fi
		else
			echo "Could not restore pre-install iptables policies. Apparently the file '$preinstall_policies_file' is empty or misconfigured." >&2
		fi
	done < "$preinstall_policies_file"
fi

### Delete associated iptables rules

# iptables-save command just dumps the table, then we pipe the contents into sed
# sed executes iptables -D (delete) command on matching rules. execution is promtped by the switch /e

echo "Deleting associated iptables rules..."
iptables-save | sed -r "/INPUT.*comment.*$iptables_comment/s/-A/iptables -D/e" &>/dev/null



### Destroy associated ipsets
echo "Destroying ipsets for ${suite_name}..."
for ipset_name in $(ipset list -n | grep "${suite_name}"); do
	echo "Found ipset \"$ipset_name\", destroying..."
	ipset destroy "$ipset_name"
done

if [ ! "$partial_uninstall" ]; then
	echo "Deleting script's data folder $datadir..."
	### Delete app data and directory
	rm -rf "$datadir"

	### Delete scripts
	echo "Deleting scripts from $install_dir..."
	rm "$install_dir/${suite_name}-fetch"
	rm "$install_dir/${suite_name}-apply"
	rm "$install_dir/${suite_name}-manage"
	rm "$install_dir/${suite_name}-cronsetup"
	rm "$install_dir/${suite_name}-run"
	rm "$install_dir/${suite_name}-common"
	rm "$install_dir/validate_cron_schedule.sh"
	rm "$install_dir/check_ip_in_ripe.sh"
	rm "$install_dir/${suite_name}-reset"
	rm "$install_dir/${suite_name}-uninstall"
	rm "$install_dir/${suite_name}-backup"

	### Delete the config dir
	echo "Deleting config..."
	rm -rf "$conf_dir"

	echo "Uninstall complete."
fi

echo ""
