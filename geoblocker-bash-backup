#!/usr/bin/env bash

# geoblocker-bash-backup

# Creates a backup of the current iptables state and geoblocker-associated ipsets, or restores them from backup.

#  if restore from backup fails, and if "EmergencyDeactivation" option is enabled in the config file
#  (disabled by default; can be set set during installation with the '-e' option switch),
#  assumes a fundamental issue and disables geoblocking completely via the *reset script
#  (removes associated ipsets and iptables rules, restores pre-install policies for INPUT and FORWARD chains,
#  does not remove installed scripts, config and data).

#### Initial setup

me=$(basename "$0")

# check for root
[[ "$EUID" -ne 0 ]] && {
	err="Error: $me needs to be run as root."
	echo "$err" >&2
	[[ ! "$nolog" ]] && logger "$err"
	exit 1
}

suite_name="geoblocker-bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[[ -n "$script_dir" ]] && cd "$script_dir" || { err="$me: Error: Couldn't cd into '$script_dir'."; echo "$err" >&2; \
	[[ ! "$nolog" ]] && logger "$err"; exit 1; }

source "$script_dir/${suite_name}-common" || { err="$me: Error: Can't source ${suite_name}-common."; echo "$err" >&2; \
	[[ ! "$nolog" ]] && logger "$err"; exit 1; }

# **NOTE** that some functions and variables are sourced from the *common script


# sanitize arguments
sanitize_args "$@"
# replace arguments with sanitized ones
set -- "${arguments[@]}"


#### USAGE

usage() {
    cat <<EOF

$me
- Creates a backup of the current iptables states and current ipsets,
- or restores them from backup
- if restore from backup fails, in case the suite was installed with the -e option (for emergency deactivation),
     calls the *reset script to deactivate geoblocking

Usage: $me <action> [-d] [-h]

Actions:
    create-backup|restore    : create backup or restore config, associated ipsets and iptables rules

Options:
    -d                       : Debug
    -h                       : This help

EOF
}

#### PARSE ARGUMENTS

# 1st argument should be the requested action
action="$1"
shift 1

# check for valid action
case "$action" in
	create-backup | restore ) ;;
	* ) usage; err1="Error: Unrecognized action: '$action'."; err2="Specify action in the 1st argument!"; die "$err1" "$err2" ;;
esac

# process the rest of the arguments
while getopts ":dh" opt; do
	case $opt in
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; echo "Error: Unknown option: '-$OPTARG'." >&2; exit 1;;
	esac
done
shift $((OPTIND -1))

[[ -n "$*" ]] && {
	usage
	echo "Error in arguments. First unrecognized argument: '$1'." >&2
	exit 1
}

echo

# get debugmode variable from either the args or environment variable, depending on what's set
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg


#### FUNCTIONS

restore_from_file() {
# restores iptables and ipset state from a backup file
	restoretarget="$1"
	restorefile="$2"
	echo "Checking the $restoretarget portion of the backup file..."

	# count lines in the corresponding portion of the backup file
	case "$restoretarget" in
		iptables) line_cnt=$(sed -e '/\[IPSET\].*/Q' "$restorefile" | wc -l) ;;
		ipset) line_cnt=$(sed -n "/create ${suite_name}/,\$p" "$restorefile" | grep "add ${suite_name}" | wc -l) ;;
	esac
	debugprint "$restoretarget lines number in backup: $line_cnt"

	if [[ "$line_cnt" -gt 0 ]]; then
		echo -n "Restoring $restoretarget state from backup... "

		case "$restoretarget" in
			# reads <$restorefile> from beginning to [IPSET] and pipes the result into iptables-restore
			iptables) sed -e '/\[IPSET\]/Q' "$restorefile" 2>&1 | iptables-restore; rv="${PIPESTATUS[1]}" ;;

			# reads <$restorefile> from "create ${suite_name}" to EOF and pipes the result into "ipset restore"
			ipset) sed -n "/create ${suite_name}/,\$p" "$restorefile" 2>&1 | ipset restore; rv="${PIPESTATUS[1]}" ;;
		esac

		if [[ $rv -eq 0 ]]; then
			echo "Success."

			return 0
		else
			echo "Failure." >&2
			err1="Failed to restore $restoretarget known-good state from backup."
		fi
	else
		err1="Error: $restoretarget backup appears to be empty or non-existing."
	fi

	# if we are here then something is seriously broken (unless the script ran in test mode with the -t switch)
	# run the reset script to deactivate geoblocking and remove associated cron jobs
	err2="*** Deactivating geoblocking and removing cron jobs ***"

	# if -t switch wasn't specified at launch then it's not a test
	if [[ ! "$test" ]]; then
		knowngood_failed "$err1" "$err2"
	else
		echo "$err1" >&2
		echo "-t switch was specified, which means we are in test mode. Skipping emergency deactivation." >&2
		echo "WARNING: RECOVERY TEST FAILED AND GEOBLOCKER IS CURRENTLY INACTIVE" >&2

		if [[ "$restoretarget" = "iptables" ]]; then
			die -nolog
		fi
	fi
	echo -e "\n"
}

restoreknowngood() {
# resets iptables policies and rules, destroys all associated ipsets and then initiates restore from file
	restorefile="$1"
	echo -e "\n"
	echolog -err "NOTE: Resetting iptables rules for ${suite_name}."

	echo "Setting INPUT chain policy to ACCEPT... "
	iptables -P INPUT ACCEPT

	# sed looks for rules with the comment which we use to stamp our rules
	# sed executes iptables -D (delete) command on matching rules. execution is promtped by the switch /e (only available in GNU sed)
	iptables-save | sed -r "/INPUT.*comment.*${iptables_comment}/s/-A/iptables -D/e" &>/dev/null; rv=$?
	if [[ $rv -ne 0 ]]; then
		echo "Failed."
		err1="Error removing existing iptables rules with command: 'iptables-save | sed -r \"/INPUT.*comment.*$iptables_comment/s/-A/iptables -D/e\" '."
		knowngood_failed "$err1"
	else
		echo "Ok."
	fi

	sleep 1
	for curr_ipset in $(ipset list -n | grep "$ipset_tag"); do
		echo -n "Destroying ipset '$curr_ipset'... "
		ipset destroy "$curr_ipset"
		if [[ $rv -ne 0 ]]; then
			knowngood_failed "Error destroying ipset '$curr_ipset'."
		else
			echo "Ok."
		fi
	done

	echo "NOTE: Restoring last known-good ipset and iptables from backup... " >&2
	echo -e "Backup file: $restorefile\n" >&2

	restore_from_file "ipset" "$restorefile"
	restore_from_file "iptables" "$restorefile"
}

knowngood_failed() {
	echo
	echolog -err "$1" "$2"
	if [[ -n "$emergency_deactivation" ]]; then ${suite_name}-reset; fi
	debugexitmsg
	exit 1
}

#### VARIABLES

iptables_comment="$suite_name"
ipset_tag="$suite_name"

# get datadir from the config file
datadir="$(getconfig "Datadir")" || { die "Error: Couldn't read value for Datadir from the config file."; }

# get EmergencyDeactivation from the config file
emergency_deactivation="$(getconfig "EmergencyDeactivation")" || { die "Error: Couldn't read value for EmergencyDeactivation from the config file."; }

conf_file_backup="$datadir/${suite_name}.conf.bak"
knowngood_file="$datadir/iptables_knowngood.bak"


#### CHECKS

missing_deps="$(check_deps iptables-save iptables-restore ipset)" || die "Error: missing dependencies: $missing_deps."

# check that the config file exists
[[ ! -f "$conf_file" ]] && die "Config file '$conf_file' doesn't exist! Run the installation script again."

# check for knowngood file path
if [[ -z "$knowngood_file" ]]; then
	die "Error: Could not read the backup file path from config."
fi

# check for valid action

[[ -z "$action" ]] && { usage; die "Specify action!"; }

case "$action" in
	create-backup) ;;
	restore) ;;
	*) usage; die "Error: unsupported action '$action'" ;;
esac


#### MAIN

if [[ "$action" = "create-backup" ]]; then
### Create backup file for known-good iptables state and save current state to the file

	echo -n "Creating backup of current iptables state... "
	touch "${knowngood_file}.new"

	iptables-save > "${knowngood_file}.new"; rv=$?
	[[ "$rv" -ne 0 ]] && die "Error creating backup of iptables state with command: 'iptables-save > ${knowngood_file}.new'."
	echo "Ok."

		# we use the same file for iptables and ipset backup
		# the "[IPSET]" line separates portions of the file
		echo "[IPSET]" >> "${knowngood_file}.new"

	# get tlds from the config file
	config_tlds="$(getconfig "Countries")" || { die "Error: Couldn't read value for Countries from the config file."; }

	for curr_tld in $config_tlds; do
		curr_ipset="${suite_name}_${curr_tld}"
		echo -n "Creating backup of ipset '$curr_ipset'... "
		ipset save "$curr_ipset" >> "${knowngood_file}.new"; rv=$?
		[[ "$rv" -ne 0 ]] && die "Error creating backup of ipset '$curr_ipset'."
	echo "Ok."
	done

	cp "$conf_file" "$conf_file_backup"; rv=$?
	[[ "$rv" -ne 0 ]] && die "Error creating a backup copy of the config file."

	mv "$knowngood_file.new" "$knowngood_file"; rv=$?
	[[ "$rv" -ne 0 ]] && die "Error overwriting the backup file."

	echo -e "\nSuccessfully created backup of config, ipsets and iptables rules."
	echo "Backup file: '$knowngood_file'"
fi

if [[ "$action" = "restore" ]]; then
### Restore iptables and ipsets to known-good state from backup file
	restoreknowngood "$knowngood_file"
	echolog "Successfully restored known-good ipset and iptables state from backup."
	echo
	cp "$conf_file_backup" "$conf_file"; rv=$?
	[[ "$rv" -ne 0 ]] && die "Error restoring the config file from backup."
fi

debugexitmsg

exit 0
