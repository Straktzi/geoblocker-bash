#!/bin/bash

# Deletes associated cron jobs
# Restores pre-install state of default policies for INPUT and FORWARD chains
# Deletes associated iptables rules and removes the whitelist ipset
# Deletes scripts' data folder /var/lib/geoblocker_bash
# Deletes the scripts from /usr/local/bin

#### FUNCTIONS

usage() {
    cat <<EOF
This script:
1) Deletes associated cron jobs
2) Restores pre-install state of default policies for INPUT and FORWARD chains
3) Deletes associated iptables rules and removes the whitelist ipset
4) Deletes scripts' data folder /var/lib/geoblocker_bash
5) Deletes the scripts from /usr/local/bin


    Usage: $me [-p]

    Options:
    -p     : partial uninstall: restores iptables to pre-install state and removes cron jobs but leaves files in place
	-h     : This help

EOF
}

#### PARSE ARGUMENTS

while getopts "ph" opt; do
	case $opt in
		p) partial_uninstall="true";;
		h) usage; exit 0;;
esac
done
shift $((OPTIND -1))

echo ""

#### Checks

# check for root
if [ "$EUID" -ne 0 ]
  then echo "This needs to be run as root."
  exit
fi

### Initialize variables
install_dir="/usr/local/bin"
datapath="/var/lib/geoblocker_bash"
preinstall_policies_file="$datapath/preinstall_policies.bak"
whitelist_path="$datapath/ip_lists"
ipset_name="geoblocker_whitelist"
iptables_comment="geoblocker_bash"


### Delete associated cron jobs
echo "Deleting cron jobs for geoblocker_bash..."
crontab -u root -l 2>/dev/null |  grep -v 'geoblocker_bash-run' | sudo crontab -u root -

### Restore pre-install state of default policies for INPUT and FORWARD

while read -r preinstall_policy; do
	chain_name=$(echo "$preinstall_policy" | cut -f 1 -d " ")
	oldpolicy=$(echo "$preinstall_policy" | cut -f 2 -d " ")
	echo "Restoring pre-install iptables policy with command: \"iptables -P $chain_name $oldpolicy\""
	if [ ! -z "$chain_name" ] && [ ! -z "oldpolicy" ]; then
		iptables -P $chain_name $oldpolicy; rv=$?
		if [ $rv -ne 0 ]; then
			echo "Error $rv trying to change iptables policy with command \"iptables -P $chain_name $oldpolicy\". Exiting."
			exit 1
			fi
	else
		echo "Could not restore pre-install iptables policies. Apparently the file $preinstall_policies_file is empty, missing or misconfigured."
	fi
done < "$preinstall_policies_file"


### Delete associated iptables rules

# iptables-save command just dumps the table, then we pipe the contents into sed
# sed executes iptables -D (delete) command on matching rules. execution is promtped by the switch /e

echo "Deleting associated iptables rules..."
iptables-save | sed -r "/OUTPUT.*comment.*$iptables_comment/s/-A/iptables -D/e" &>/dev/null
iptables-save | sed -r "/INPUT.*comment.*$iptables_comment/s/-A/iptables -D/e" &>/dev/null



### Destroy associated ipset
echo "Destroying ipset $ipset_name..."
ipset destroy "$ipset_name"


if [ ! $partial_uninstall ]; then
	echo "Deleting script's data folder $datapath..."
	### Delete app data and directory
	rm -rf "$datapath"

	### Delete scripts
	echo "Deleting scripts from $install_dir..."
	rm "$install_dir/geoblocker_bash-fetch"
	rm "$install_dir/geoblocker_bash-apply"
	rm "$install_dir/geoblocker_bash-run"
	rm "$install_dir/geoblocker_bash-install"
	rm "$install_dir/validate_cron_schedule.sh"

	echo "Uninstall complete."
fi

echo ""
