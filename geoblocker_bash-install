#!/usr/bin/env bash

# geoblocker_bash-install

# Installer for geoip blocking suite of bash scripts
# Must be run as root

# Creates system folder structure for scripts, config and data.
# Copies all scripts included in the suite to /usr/local/bin.
# Creates backup of pre-install policies for INPUT and FORWARD chains.
# Calls geoblocker_bash-manage to set up geoblocker.
# If an error occurs during installation, calls the uninstall script to revert any changes made to the system.
# Accepts a custom cron schedule expression as an argument. Default cron schedule is "0 4 * * *" - at 4:00 [am] every day.

# Requires the following additional scripts (included in the distribution):
# geoblocker_bash-fetch, geoblocker_bash-apply, geoblocker_bash-run, geoblocker_bash-uninstall, validate_cron_schedule.sh, check_ip_in_ripe.sh


#### Initial setup

me=$(basename "$0")
suite_name="geoblocker_bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'."; exit 1; }

source "$script_dir/${suite_name}-common" || { echo "Error: Can't find ${suite_name}-common."; exit 1; }
# NOTE that some functions and variables are sourced from the *common script

# sanitize arguments
sanitize_args "$@"
# replace arguments with sanitized ones
set -- "${arguments[@]}"


#### USAGE

usage() {

    cat <<EOF

$me
Installer for geoip blocking suite of bash scripts.
Must be run as root.

This script:
1) Creates system folder structure for scripts, config and data.
2) Copies all scripts included in the suite to /usr/local/bin.
3) Creates backup of pre-install policies for INPUT and FORWARD iptables chains.
4) Calls ${suite_name}-manage to set up geoblocker and then call the -fetch and -apply scripts.
5) If an error occurs during installation, calls the uninstall script to revert any changes made to the system.
6) Accepts a custom cron schedule expression as an argument. Default cron schedule is "0 4 * * *" - at 4:00 [am] every day.

Usage: $me -c <"tld [tld] ... [tld]"> [-s <"sch_expression">|disable] [-p] [-d] [-h]

Options:
    -c <"tld(s)">                 : tld / country codes. if passing multiple country codes, use double quotes
    -s <"sch_expression">|disable : schedule expression for the periodic cron job, must be inside double quotes
                                           default: "0 4 * * *" (at 4:00 [am] every day)
                                    "disable" turns off persistence

    -p                            : No Drop: applies the config but skips setting INPUT chain default policy to DROP
    -d                            : Debug
    -h                            : This help

EOF
}

#### PARSE ARGUMENTS

while getopts "c:s:pdh" opt; do
	case $opt in
		c) tlds=$OPTARG;;
		s) cron_schedule=$OPTARG;;
		p) nodrop="true";;
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; exit 1;;
	esac
done

echo

# get debugmode variable from either the args or environment variable
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg


#### FUNCTIONS

install_failed() {
	echo "Installation failed." >&2
	echo "Uninstalling ${suite_name}..."
	bash ${suite_name}-uninstall
	exit 1
}

check_file_exists() {
if [ ! -f "$1" ]; then
	echo "Error: Can not find $1" >&2
	echo ""
	exit 1
fi
}

copyscript() {
	scriptfile="$1"; destination="$2"
	errormessage="Error copying $scriptfile to $destination. Exiting."
	cp "$scriptfile" "$destination"; rv=$?
	if [ $rv -ne 0 ]; then
		echo "$errormessage" >&2
		echo ""
		install_failed
	fi
	chmod +x "${install_dir}/$scriptfile"
}


#### VARIABLES

# set environment variable "nolog" to avoid daughter scripts writing errors
#	to syslog when encountering incorrect arguments from the user
#	nolog variable is checked in the sourced *common script
export nolog="true"

install_dir="/usr/local/bin"
datadir="/var/lib/${suite_name}"
preinstall_policies_file="${datadir}/preinstall_policies.bak"
knowngood_file="${datadir}/iptables_knowngood.bak"
whitelist_dir="${datadir}/ip_lists"

default_schedule="0 4 * * *"
cron_schedule="${cron_schedule:-$default_schedule}"
sleeptime="30"

[ "$cron_schedule" = "disable" ] && no_persistence="true"

#### CHECKS

if [ -z "$tlds" ]; then
	usage
	echo "Specify countries with \"-c <tlds>\"!"
	echo ""
	exit 1
fi

# check for root
if [ "$EUID" -ne 0 ]; then
	echo "This needs to be run as root."
	echo ""
	exit 1
fi

# check for systemd
if [ "$(! ps -p 1 -o comm=)" != "systemd" ]; then
	echo "Error: systemd is required but this sytem does not appear to be running systemd. Exiting."
	echo ""
	exit 1
fi

# check for curl or wget
curl_or_wget=$(if hash curl 2>/dev/null; then echo "curl -s"; elif hash wget 2>/dev/null; then echo "wget -qO-"; fi);
if [ -z "$curl_or_wget" ]; then
	echo "Error: Neither curl nor wget found. Exiting."
	echo ""
	exit 1
fi

# Check that we have the ipset utility
if ! command -v "ipset" &> /dev/null; then
	echo "Error: Can not find 'ipset'. Install it with 'apt install ipset' or similar. Exiting."
	echo ""
	exit 1
fi

# Check for iptables-save utility
if ! command -v "iptables-save" &> /dev/null; then
	echo "Error: Can not find 'iptables-save'. Exiting."
	echo ""
	exit 1
fi

# Check for iptables-restore utility
if ! command -v "iptables-restore" &> /dev/null; then
	echo "Error: Can not find 'iptables-restore'. Exiting."
	echo ""
	exit 1
fi

# check for jq
if ! command -v jq &> /dev/null; then
	echo "Error: Can not find the jq Json processor. Install it with 'apt install jq' or similar. Exiting"
	echo ""
	exit 1
fi

# check for grepcidr
if ! command -v grepcidr &> /dev/null; then
	echo "Error: Can not find grepcidr. Install it with 'apt install grepcidr' or similar. Exiting"
	echo ""
	exit 1
fi

# check for bc
if ! command -v bc &> /dev/null; then
	echo "Error: Can not find bc. Exiting"
	echo ""
	exit 1
fi

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'. Exiting."; exit 1; }

check_file_exists "${suite_name}-fetch"
check_file_exists "${suite_name}-common"
check_file_exists "${suite_name}-apply"
check_file_exists "${suite_name}-run"
check_file_exists "${suite_name}-manage"
check_file_exists "${suite_name}-cronsetup"
check_file_exists "${suite_name}-backup"
check_file_exists "${suite_name}-uninstall"
check_file_exists "validate_cron_schedule.sh"
check_file_exists "check_ip_in_ripe.sh"


#### MAIN

# Create the directory for config and, if required, parent directories
mkdir -p "$conf_dir"

# write some config to the config file
echo -n "Setting initial config... "
setconfig "Installdir" "$install_dir"; rv=$(( rv + $?))
setconfig "Datadir" "$datadir"; rv=$(( rv + $?))
[ "$cron_schedule" != "disable" ] && { setconfig "CronSchedule" "$cron_schedule"; rv=$(( rv + $?)); }
setconfig "DefaultSchedule" "0 4 * * *"; rv=$(( rv + $?))
setconfig "RebootSleep" "$sleeptime"; rv=$(( rv + $?))
setconfig "Backup_script" "$backup_script"; rv=$(( rv + $?))
setconfig "NoPersistence" "$no_persistence"; rv=$(( rv + $?))
setconfig "NoDrop" "$nodrop"; rv=$(( rv + $?))
if [ "$rv" -ne 0 ]; then
	echo "Failed."
	install_failed
else echo "Ok."
fi

# Create the directory for downloaded lists and, if required, parent directories
mkdir -p "$whitelist_dir"


## Create a backup file for known-good iptables state

echo -n "Creating file for backup of iptables state..."

# if a backup file already exists, continue installing but skip overwriting the backup file
if [ -f "$knowngood_file" ]; then
	echo "Backup file already exists, skipping."
else
	touch "$knowngood_file"; rv=$?
	if [ $rv -ne 0 ]; then
		echo "Error."
		install_failed
	fi
	echo "Ok."
fi

## Copy scripts to $install_dir

# if we are running from $install_dir, assume that all other necessary scripts have already been installed, skip copying
if [ "$script_dir" != "$install_dir" ]; then
	echo -n "Copying scripts to $install_dir... "
	copyscript "${suite_name}-install" "${install_dir}/"
	copyscript "${suite_name}-common" "${install_dir}/"
	copyscript "${suite_name}-fetch" "${install_dir}/"
	copyscript "${suite_name}-apply" "${install_dir}/"
	copyscript "${suite_name}-run" "${install_dir}/"
	copyscript "${suite_name}-manage" "${install_dir}/"
	copyscript "${suite_name}-cronsetup" "${install_dir}/"
	copyscript "${suite_name}-backup" "${install_dir}/"
	copyscript "${suite_name}-uninstall" "${install_dir}/"
	copyscript "validate_cron_schedule.sh" "${install_dir}/"
	copyscript "check_ip_in_ripe.sh" "${install_dir}/"
	echo "Ok."
fi


### Back up pre-install policies for INPUT and FORWARD chains

echo -n "Creating backup of current INPUT and FORWARD iptables chains policies... "

# if a backup file already exists, continue installing but skip overwriting the backup file
if [ -f "$preinstall_policies_file" ]; then
	echo "Backup file already exists, skipping creation of iptables policies backup." >&2
else
	preinstall_input_policy=$(iptables -nL | grep "Chain INPUT" | awk -F'policy |)' '{print $2}')
	preinstall_forward_policy=$(iptables -nL | grep "Chain FORWARD" | awk -F'policy |)' '{print $2}')
	if [ -z "$preinstall_input_policy" ] || [ -z "$preinstall_forward_policy" ]; then
		echo "Error: failed to determine current policies."
		install_failed
	fi
	touch "$preinstall_policies_file"; rv=$?
	if [ $rv -ne 0 ]; then
		echo "Error: failed to create backup file." >&2
		install_failed
	fi
	echo "INPUT $preinstall_input_policy" >> "$preinstall_policies_file"
	echo "FORWARD $preinstall_forward_policy" >> "$preinstall_policies_file"
	echo "Ok."
	debugprint "Current policies:   INPUT: $preinstall_input_policy, FORWARD: $preinstall_forward_policy"
fi

# cd into the install directory
# exit in case "cd" fails
[ -n "$install_dir" ] && cd "$install_dir" || { echo "Error: Couldn't cd into '$install_dir'. Exiting."; install_failed; }

### Add whitelist(s) for $tlds to managed whitelists, then fetch and apply the whitelist(s)
${suite_name}-manage -f -a "add" -c "$tlds"; rv=$?

# the *manage script exits with return value 254 if requested country is already included in the config
if [ $rv -ne 0 ] && [ $rv -ne 254 ]; then
	echo "Failed to create and apply the whitelist."
	install_failed
fi

### Set up cron jobs
${suite_name}-manage -a "schedule" -s "$cron_schedule"; rv=$?

if [ $rv -ne 0 ]; then
	echo "Failed to create and apply the whitelist."
	install_failed
fi

echo "Install done."

echo ""

unset nolog
unset debugmode

exit 0