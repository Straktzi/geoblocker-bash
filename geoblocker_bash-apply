#!/bin/bash -l

# Creates or updates a named ipset from a file.
# Sets default policy on INPUT and FORWARD iptables chains to DROP
# Then creates iptables rules that allow connection from subnets included in the ipset
#
# Depends on 'ipset' program. To install it on Debian derivatives, use the command:
## apt install ipset
#
# For input, requires a plaintext file with ip subnet list in the format xxx.xxx.xxx.xxx/xxx
#
# Manuals used to make this script:
## https://ipset.netfilter.org/ipset.man.html
## https://www.thegeekdiary.com/how-to-use-ipset-command-in-linux/

me=$(basename "$0")

#### FUNCTIONS

usage() {
    cat <<EOF

    Usage: $me -p iplist_file_path [-t timeout] [-d] [-h]

    Options:
		-p path		: path to a file with raw list in the format of xxx.xxx.xxx.xxx/xx
		-t timeout	: timeout in seconds. new entries to the list will be destroyed after timeout (default: -1, no timeout)

		-d		: Debug
		-h		: This help

EOF
}

die() {
# echoes out the error and writes it into syslog
	echo "$@" 1>&2
	echo ""
	logger -t geoblocker_bash-apply "$@"
	exit 1
}


#### Initialize variables
ipset_name="geoblocker_whitelist"
iptables_comment="geoblocker_bash"
family="inet"

#### PARSE ARGUMENTS

while getopts "p:f:t:dh" opt; do
    case $opt in
		p) iplist_file=$OPTARG;;
		t) timeout=$OPTARG;;
		d) debug=true;;
		h) usage; exit 0;;
    esac
done
shift $((OPTIND -1))

timeout=${timeout:-"0"}  # default is 0 - no timeout
echo ""

#### Checks

# check that we have iplist file path
if [ -z "$iplist_file" ]; then
	err="Error: iplist file path can not be empty. Exiting."
	usage
	echo ""
	die "$err"
fi

# Check that we have ipset
if ! command -v "ipset" &> /dev/null; then
	err="Error: Cannot find 'ipset'. Install it with 'apt install ipset' or similar. Exiting."
	die "$err"
fi

# check that we have ipset_name
if [ -z "$ipset_name" ]; then
	err="Error: ipset name can not be empty. Exiting."
	echo ""
	die "$err"
fi

echo ""

# check that the input iplist file exists
if [ ! -f "$iplist_file" ]; then
	err="Error: Cannot find the iplist file at path: \"$iplist_file\". Exiting."
	die "$err"
fi



#### Main


## delete existing iptables rules matching comment "$iptables_comment"

# iptables-save command just dumps the table, then we pipe the contents into sed
# sed executes iptables -D (delete) command on matching rules. execution is promtped by the switch /e

iptables-save | sed -r "/OUTPUT.*comment.*$iptables_comment/s/-A/iptables -D/e" &>/dev/null
iptables-save | sed -r "/INPUT.*comment.*$iptables_comment/s/-A/iptables -D/e" &>/dev/null


## check if ipset with given name already exists and is non-empty
# we query ipset and check how many lines it gives for given name.
# for non-existing sets that should be 0
# for existing empty sets that should be 7
# for existing non-empty sets that should be >7

ipset_length=$(ipset -L $ipset_name 2>/dev/null |  wc -l)
[ $debug ] && echo "Debug: ipset_length for existing ipset \"$ipset_name\": $ipset_length"

if [ $ipset_length -ge "7" ]; then
	[ $debug ] && echo "Debug: Found existing ipset \"$ipset_name\". Destroying."

#	[ $debug ] && echo "Debug: Trying to remove matching iptables rule..."
#	iptables -D INPUT -m set --match-set "$ipset_name" src -j ACCEPT 2>/dev/null

	[ $debug ] && echo "Debug: Destroying ipset \"$ipset_name\"..."
	ipset destroy "$ipset_name"; rv=$?

	if [ $rv -ne 0 ]; then
		err="Error $rv destroying ipset \"$ipset_name\". Exiting."
		die "$err"
	else
		[ $debug ] && echo "Successfully destroyed existing ipset \"$ipset_name\"."
	fi
fi

if [ $ipset_length -eq 0 ]; then
	[ $debug ] && echo "Debug: Ipset \"$ipset_name\" doesn't exist yet."
fi


#create new ipset

[ $debug ] && echo "Creating new ipset \"$ipset_name\", for family \"$family\", with timeout \"$timeout\"."
ipset create "$ipset_name" hash:net family "$family" timeout "$timeout"; rv=$?

if [ $rv -ne 0 ]; then
	err="Error $rv trying to create ipset \"$ipset_name\". Exiting."
	die "$err"
else
	echo "Successfully created ipset \"$ipset_name\"."
fi

# import ip list into ipset from file

for ip in `cat $iplist_file`; do
	ipset add "$ipset_name" "$ip"; rv=$?
	if [ $rv -ne 0 ]; then
		err="Error $rv trying to run command: \"ipset add $ipset_name $ip\". Exiting."
		die "$err"
	fi
done


# allow already established/related connections

[ $debug ] && echo "Debug: Allowing established/related connections..."


# insert rules to allow ESTABLISHED, RELATED connections
iptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -m comment --comment "$iptables_comment"; rv=$?
if [ $rv -ne 0 ]; then
	err="Error $rv trying to insert rules with command \"iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\". Exiting."
	die "$err"
fi

# append the whitelist to the INPUT chain
echo "Appending the whitelist to the INPUT chain..."
iptables -A INPUT -m set --match-set "$ipset_name" src -j ACCEPT -m comment --comment "$iptables_comment"; rv=$?
if [ $rv -ne 0 ]; then
	err="Error $rv trying to append ipset rules with command \"iptables -I INPUT -m set --match-set "$ipset_name" src -j ACCEPT\". Exiting."
	die "$err"
fi


## configure iptables policies

# set policy on INPUT and FORWARD chains to DROP

echo ""
echo "Setting default iptables policies for INPUT and FORWARD to DROP..."
iptables -P INPUT DROP; rv=$?
if [ $rv -ne 0 ]; then
	err="Error $rv trying to change iptables policy with command \"iptables -P INPUT DROP\". Exiting."
	die "$err"
fi

iptables -P FORWARD DROP; rv=$?
if [ $rv -ne 0 ]; then
	err="Error $rv trying to change iptables policy with command \"iptables -P FORWARD DROP\". Exiting."
	die "$err"
fi


echo "Success. All done!"
echo ""
