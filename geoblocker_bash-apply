#!/bin/bash -l

# geoblocker_bash-apply

# Creates or removes ipsets and iptables rules for specified country codes.

# 'geoblocker_bash-apply -a add -c <"country_codes">' :
#     Loads ip lists for the specified countries into ipsets
#         and sets iptables rules to only allow connections
#         from the local subnet and from subnets included in the ipsets.

# 'geoblocker_bash-apply -a remove -c <"country_codes">' :
#     removes ipsets and associated iptables rules for specified countries.

# Requires the 'ipset' utility. To install it on Debian or derivatives, use the command:
## apt install ipset
#
# Requires root priviliges


#### Initial setup

me=$(basename "$0")
suite_name="geoblocker_bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[ -n "$script_dir" ] && cd "$script_dir" || { echo "Error: Couldn't cd into '$script_dir'."; exit 1; }

source "$script_dir/${suite_name}-common" || { echo "Error: Can't find ${suite_name}-common."; exit 1; }
# **NOTE** that some functions and variables are sourced from the *common script

# sanitize arguments
sanitize_args "$@"
# replace arguments with sanitized ones
set -- "${arguments[@]}"


#### USAGE

usage() {
    cat <<EOF

$me
    Loads or removes ipsets and iptables rules for specified country codes.
    Supported actions (specified by the -a option): add, remove.
	If 'NoDrop' option is set to "true" in the config file, will perform all actions,
        except setting default iptables policies to DROP, which effectively leaves geoblocking disabled.

Usage: $me -a <action> -c <"country_codes"> [-d] [-t] [-h]

Options:
    -a add|remove        : action to perform: "add" or "remove" associated ipsets and iptables rules
    -c <"country_codes"> : tlds / country codes (if specifying multiple tlds, put them in double quotes)

    -d                   : Debug
    -t                   : Simulate fault and test recovery
    -h                   : This help

EOF
}

#### PARSE ARGUMENTS

while getopts "a:c:pdht" opt; do
	case $opt in
		a) action=$OPTARG;;
		c) tlds=$OPTARG;;
		d) debugmode_args="true";;
		h) usage; exit 0;;
		t) test=true;;
		\?) usage; exit 1;;
	esac
done
shift $((OPTIND -1))

echo

# get debugmode variable from either the args or environment variable, depending on what's set
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg

#### FUNCTIONS

round_up_to_power2() {
# rounds the input number up to the next high power of 2
	echo "\
		if($1==0) x=0 else \
			x=l($1)/l(2); \
		scale=0; \
		y=2^((x+1)/1); \
		if($1==y/2 && $1!=1) \
			print $1 \
		else \
			print y"\
	 | bc -l
}


#### VARIABLES

# get datadir from the config file
datadir="$(getconfig "Datadir")"

nodrop="$(getconfig "NoDrop")"
whitelist_dir="${datadir}/ip_lists"
iptables_comment_global="${suite_name}_global"
family="inet"
ipset_hashsizes=()
ipset_maxelements=()


#### CHECKS

# check for root
[ "$EUID" -ne 0 ] && die 254 "This needs to be run as root."

# check that the config file exists
[ ! -f "$conf_file" ] && die "Config file '$conf_file' doesn't exist! Run the installation script again."

# check for country tlds
[ -z "$tlds" ] && { usage; die 254 "tlds (country codes) variable is empty!"; }

# check for datadir path
[ -z "$datadir" ] && { usage; die 254 "Error: failed to read the 'datadir' variable from the config file."; }

# Check for ipset utility
! command -v "ipset" &> /dev/null && die 254 "Error: Can not find 'ipset'. Install it with 'apt install ipset' or similar."

# Check for iptables-save utility
! command -v "iptables-save" &> /dev/null && die 254"Error: Can not find 'iptables-save'."

# Check for bc utility
! command -v "bc" &> /dev/null && die 254 "Error: Can not find 'bc'."


# check for valid action

[ -z "$action" ] && { usage; die 1 "Specify action with '-a <action>'!"; }

case "$action" in
	add) ;;
	remove) ;;
	*) usage; die 254 "Error: unsupported action '$action'" ;;
esac


#### MAIN

### create temporary ipsets and load ip lists into them
if [ "$action" = "add" ]; then
	for tld in $tlds; do
		whitelist_file="${whitelist_dir}/ipv4_${tld}"
		temp_ipset="${suite_name}_${tld}_temp"

		# check that the whitelist file exists
		[ ! -f "$whitelist_file" ] && die 254 "Error: Can not find the whitelist file in path: '$whitelist_file'."

		### Create a temporary ipset and load subnets from file into it

		# destroy temporary ipset in case it exists
		ipset destroy "$temp_ipset" &>/dev/null

		# count lines in the whitelist file
		ip_cnt=$(wc -l < "$whitelist_file")
	#	debugprint "ip count in the whitelist file '$whitelist_file': $ip_cnt"

		# calculate necessary ipset size = (next high power of 2 > $ip_cnt)
		ipset_maxelem=$(round_up_to_power2 "$ip_cnt")
	#	debugprint "calculated maxelem for ipset: $ipset_maxelem"

		# set hashsize to (512) or (ipset_maxelements / 4), whichever is larger
		prelim_hashsize=$(echo "scale=0 ; $ipset_maxelem / 4" | bc)
	#	debugprint "calculated hashsize: $prelim_hashsize"
		if [ "$prelim_hashsize" -lt 512 ]; then
			ipset_hash=512
		else
			ipset_hash="$prelim_hashsize"
		fi
	#	debugprint "final hashsize for the new ipset: $ipset_hashsizes"

		# create new temporary ipset
		debugprint "Creating new ipset '$temp_ipset'... "
		ipset create "$temp_ipset" hash:net family "$family" hashsize "$ipset_hash" maxelem "$ipset_maxelem"; rv=$?
		if [ $rv -ne 0 ]; then
			debugprint "Failed. Destroying the temporary ipset."
			ipset destroy "$temp_ipset" &>/dev/null
			die "Error creating ipset '$temp_ipset' with hashsize '$ipset_hash' and maxelements '$ipset_maxelem'."
		fi
		debugprint "Ok."

		# import the whitelist into temporary ipset from file
		echo -n "Importing the whitelist for country '$tld' into temporary ipset... "

		# reads $whitelist_file, transforms each line into 'ipset add' command and redirects the result into "ipset restore"
		# this is about 50x faster than issuing discrete "ipset add" commands in a loop
		# the '-exist' option prevents the restore command from getting stuck when encountering duplicates
		while read -r subnet; do
			echo "add \"$temp_ipset\" $subnet";
		done < "$whitelist_file" |\
			ipset restore -exist; rv=$?

		if [ $rv -ne 0 ]; then
			echo "Failed. Destroying the temporary ipset."
			ipset destroy "$temp_ipset"
			die 254 "Error when importing the list from '$whitelist_file' into ipset '$temp_ipset'."
		fi

		echo "Ok."

		[ "$debugmode" ] && ipset_lines_cnt="$(ipset save "$temp_ipset" | grep "add $temp_ipset" | wc -l)"
		debugprint "subnets in the temporary ipset: $ipset_lines_cnt"

		ipset_hashsizes["$tld"]="$ipset_hash"
		ipset_maxelements["$tld"]="$ipset_maxelem"
	done
	echo
fi


### Remove existing geoblocker rules for iptables

## Temporarily set the policy for the INPUT chain to ACCEPT, in order to prevent user lock out in case of an error
echo -n "Setting INPUT chain policy to ACCEPT... "
iptables -P INPUT ACCEPT; rv=$?
[ $rv -ne 0 ] && die "Error trying to change iptables policy with command 'iptables -P INPUT ACCEPT'."
echo "Ok."
echo

## delete existing iptables rules matching comment "$iptables_comment"
for tld in $tlds; do
	iptables_comment="${suite_name}_${tld}"
	echo -n "Removing existing iptables rules for country '$tld'... "

	# sed looks for rules with the comment which we use to stamp our rules
	# sed executes iptables -D (delete) command on matching rules. execution is promtped by the switch /e (only available in GNU sed)
	iptables-save | sed -r "/INPUT.*comment.*${iptables_comment}/s/-A/iptables -D/e" &>/dev/null; rv="${PIPESTATUS[0]}"
	if [ $rv -ne 0 ]; then
		echo "Failure."
		die "Error removing existing rules with command: 'iptables-save | sed -r \"/INPUT.*comment.*$iptables_comment/s/-A/iptables -D/e\" '."
	fi
	echo "Ok."
done
echo


## delete existing iptables rules matching comment "$iptables_comment_global"
echo -n "Removing existing global iptables rules for '${suite_name}'... "
iptables-save | sed -r "/INPUT.*comment.*${iptables_comment_global}/s/-A/iptables -D/e" &>/dev/null; rv="${PIPESTATUS[0]}"
if [ $rv -ne 0 ]; then
	echo "Failed."
	die "Error removing existing rules with command: 'iptables-save | sed -r \"/INPUT.*comment.*${iptables_comment_global}/s/-A/iptables -D/e\" '."
fi
echo "Ok."
echo


### Apply the "remove" action
if [ "$action" = "remove" ]; then
	for tld in $tlds; do
		perm_ipset="${suite_name}_${tld}"
		echo -n "Destroying ipset for country '$tld'... "
		ipset destroy "$perm_ipset"; rv=$?
		if [ $rv -ne 0 ]; then
			echo "Failed."
			die "Error destroying ipset '$perm_ipset'."
		else
			echo "Ok."
		fi
	done
	echo
fi


### Set global iptables rules

# Add rule to allow connections from the local subnet
localsubnet="$(getlocalsubnet)"
if [ -z "$localsubnet" ]; then
	die "Error: couldn't determine local subnet."
else
	echo "Found local subnet: '$localsubnet'."
	echo -n "Appending rule to allow all traffic from the local subnet... "
	iptables -A INPUT -s "$localsubnet" -j ACCEPT -m comment --comment "${iptables_comment_global}"; rv=$?
	[ $rv -ne 0 ] && die "Failed to append rule with command 'iptables -A INPUT -s \"$localsubnet\" -j ACCEPT'."
	echo "Ok."
fi

# Add rule to allow connections from the loopback interface
echo -n "Inserting rule to allow all traffic from the loopback interface... "
iptables -I INPUT -i lo -j ACCEPT -m comment --comment "${iptables_comment_global}"; rv=$?
[ $rv -ne 0 ] && die "Failed to insert rule with command 'iptables -A INPUT -i lo -j ACCEPT'."
echo "Ok."

# Add rule to allow established/related connections
echo -n "Inserting rule to allow established/related connections... "
iptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -m comment --comment "${iptables_comment_global}"; rv=$?
[ $rv -ne 0 ] && die "Failed to insert rules with command 'iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT'."
echo "Ok."
echo


### Create permanent ipsets if they don't exist, add iptables rules for them, then swap them with temp ipsets
if [ "$action" = "add" ]; then
	for tld in $tlds; do
		perm_ipset="${suite_name}_${tld}"
		temp_ipset="${suite_name}_${tld}_temp"
		iptables_comment="${suite_name}_${tld}"
		ipset_maxelem="${ipset_maxelements[$tld]}"
		ipset_hash="${ipset_hashsizes[$tld]}"

		## check if permanent ipset already exists and is non-empty

		ipset_length=$(ipset -L "$perm_ipset" 2>/dev/null |  wc -l)

		if [ "$ipset_length" -ge "7" ]; then
			perm_ipset_exists="true"
			debugprint "found existing permanent ipset '$perm_ipset'."
		else
			perm_ipset_exists="false"
		fi

		if [ "$ipset_length" -eq 0 ]; then
			debugprint "Ipset '$perm_ipset' doesn't exist yet."
			# to avoid being dependent on ipset output staying constant down the road,
			# still trying to destroy the ipset, just in case, but not checking the return value
			ipset destroy "$perm_ipset" &>/dev/null
		fi

		## if permanent ipset doesn't exist yet, create it
		if [ ! "$perm_ipset_exists" = "true" ]; then
			# create new permanent ipset
			debugprint "Creating permanent ipset '$perm_ipset'... "
			ipset create "$perm_ipset" hash:net family "$family" hashsize "$ipset_hash" maxelem "$ipset_maxelem"; rv=$?
			if [ $rv -ne 0 ]; then
				echo "Failed. Destroying the permanent ipset."
				ipset destroy "$perm_ipset"
				die "Error when creating ipset '$perm_ipset'."
			fi
			debugprint "Ok."
		fi

		## append the whitelist rule to the INPUT chain

		echo -n "Appending the whitelist rule for country '$tld' to the INPUT chain... "
		iptables -A INPUT -m set --match-set "$perm_ipset" src -j ACCEPT -m comment --comment "$iptables_comment"; rv=$?
		[ $rv -ne 0 ] && \
			die "Failed to append ipset rules with command: iptables -I INPUT -m set --match-set \"$perm_ipset\" src -j ACCEPT."
		echo "Ok."

		## swap the new (temporary) ipset with the old (permanent) ipset
		echo -n "Making the new ipset for country '$tld' permanent... "
		ipset swap "$temp_ipset" "$perm_ipset"; rv=$?
		[ $rv -ne 0 ] && die "Failed to swap temporary and permanent ipsets."
		echo "Ok."

		## destroy the old ipset (now it's called temporary)
		debugprint "Destroying the temporary ipset for country '$tld'... "
		ipset destroy "$temp_ipset"; rv=$?
		[ $rv -ne 0 ] && die "Failed to destroy ipset '$temp_ipset'. Strange........."
		debugprint "Ok."
	done
fi
echo


### Configure iptables policies

if [ "$nodrop" != "true" ]; then
	# set policy on INPUT and FORWARD chains to DROP
	echo -n "Setting default iptables policies for INPUT and FORWARD chains to DROP... "
	iptables -P INPUT DROP; rv=$?
	[ $rv -ne 0 ] && die "Failed to change iptables policy with command 'iptables -P INPUT DROP'."

	iptables -P FORWARD DROP; rv=$?
	[ $rv -ne 0 ] && die "Failed to change iptables policy with command 'iptables -P FORWARD DROP'."
	echo "Ok."
else
	echo "WARNING: nodrop was requested. Leaving INPUT and FORWARD chains with ACCEPT policies (geoblocking is inactive)."
fi

# This line is to simulate a simple fault and test recovery from backup
# Activates when running the script with the -t switch
[ "$test" ] && die "Test test test"

echo ""

debugexitmsg

exit 0
