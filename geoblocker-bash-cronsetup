#!/usr/bin/env bash

# geoblocker-bash-cronsetup

# Loads cron-related config from the config file and sets up cron jobs for geoblocking accordingly.


#### Initial setup

me=$(basename "$0")

# check for root
[[ "$EUID" -ne 0 ]] && {
	err="Error: $me needs to be run as root."
	echo "$err" >&2
	exit 1
}

suite_name="geoblocker-bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[[ -n "$script_dir" ]] && cd "$script_dir" || { echo "$me: Error: Couldn't cd into '$script_dir'." >&2; exit 1; }

source "$script_dir/${suite_name}-common" || { echo "$me: Error: Can't source ${suite_name}-common." >&2; exit 1; }

# **NOTE** that some functions and variables are sourced from the *common script


#### USAGE

usage() {
    cat <<EOF

$me
    Loads cron-related config from the config file and sets up cron jobs for geoblocking accordingly.

Usage: $me [-d] [-h]

Options:
    -d                     : Debug
    -h                     : This help

EOF
}

#### PARSE ARGUMENTS
while getopts ":dh" opt; do
	case $opt in
		d) debugmode_args="true";;
		h) usage; exit 0;;
		\?) usage; echo "Error: Unknown option: '-$OPTARG'." >&2; exit 1;;
	esac
done
shift $((OPTIND -1))

[[ -n "$*" ]] && {
	usage
	echo "Error in arguments. First unrecognized argument: '$1'." >&2
	echo "Note: When specifying cron schedule, put it in double braces." >&2
	exit 1
}


# get debugmode value from either the args or environment variable
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode="$debugmode"

# Print script enter message for debug
debugentermsg


#### Functions

create_cron_job() {

	job_type="$1"

	# check that countries list in config is not empty
	config_ccodes="$(getconfig "Countries")" || { die -nolog "Error: Couldn't read value for Countries from the config file."; }

	if [[ -z "$config_ccodes" ]]; then
		die -nolog "Error: Countries list in the config file is empty! No point in creating autoupdate job."
	fi

	case "$job_type" in

		autoupdate)

			[[ -z "$cron_schedule" ]] && die -nolog "Error: cron schedule in the config file is empty!"
			# Validate cron schedule
			debugprint "Validating cron schedule: '$cron_schedule'."
			validate-cron-schedule.sh -x "$cron_schedule"; rv=$?
			if [[ "$rv" -ne 0 ]]; then
				die -nolog "Error validating cron schedule '$cron_schedule'."
			else
				debugprint "Successfully validated cron schedule: '$cron_schedule'."
			fi

			# Remove existing autoupdate cron job before creating new one
			remove_cron_job "autoupdate"
			cron_command="$cron_schedule \"$run_command\" update &>/dev/null # ${suite_name}-autoupdate"
			debugprint "Creating autoupdate cron job with schedule '$cron_schedule'... "
		;;

		persistence)

			debugprint "Creating persistence cron job... "

			# using the -s switch for the *run script to skip fetching at reboot
			## otherwise if there was no internet connection at reboot time, *fetch would fail which would cause *run to fail,
			## so *apply wouldn't run, which would leave the system without geoblocking rules
			cron_command="@reboot sleep $sleeptime && \"$run_command\" update -s &>/dev/null # ${suite_name}-persistence"
		;;

		*) die -nolog "Unrecognized type of cron job: '$job_type'." ;;

	esac

	#### Create new cron job

	echo -e "$(sudo crontab -u root -l 2>/dev/null)\n$cron_command" | sudo crontab -u root -
	rv=$?

	if [[ $rv -ne 0 ]]; then
		die -nolog "Error creating $job_type cron job!"
	else
		debugprint "Ok."
	fi
}


remove_cron_job() {
# remove existing cron job for geoblocker-bash
# first argument should be either 'autoupdate' or 'persistence', indicating which cron job to remove
# cron jobs are identified by the comment at the end of each job in crontab

	job_type="$1"

	if [[ -n "$job_type" ]] ; then
		if [[ "$job_type" != "autoupdate" && "$job_type" != "persistence" ]]; then
				die -nolog "Error: unknown cron job type '$job_type'."
		fi

		debugprint "Removing $job_type cron job for ${suite_name}... "
		crontab -u root -l 2>/dev/null | grep -v "${suite_name}-${job_type}" | sudo crontab -u root -
		rv=$?

		if [[ $rv -ne 0 ]]; then
			die -nolog "Error: failed to remove $job_type cron job."
		else
			debugprint "Ok."
		fi
	fi
}


# check if cron service is enabled
(systemctl is-enabled cron.service) > /dev/null || {
	err1="Error: cron service seems to be disabled."
	err2="On Debian and derivatives, enable the cron service with 'systemctl enable cron.service' before using this script."
	die -nolog "$err1" "$err2"
}


#### Variables

cron_schedule_conf="$(getconfig CronSchedule)" || { die -nolog "Error: Couldn't read value for CronSchedule from the config file."; }
cron_schedule_default="$(getconfig DefaultSchedule)" || { die -nolog "Error: Couldn't read value for Defaultschedule from the config file."; }

# if current schedule in the config file is empty, use the default schedule
cron_schedule="${cron_schedule_conf:-$cron_schedule_default}"

no_persistence="$(getconfig NoPersistence)" || { die -nolog "Error: Couldn't read value for NoPersistence from the config file."; }

install_dir="$(getconfig "Installdir")" || { die -nolog "Error: Couldn't read value for Installdir from the config file."; }
run_command="${install_dir}/${suite_name}-run"

# get sleeptime (for reboot) from the config file
sleeptime="$(getconfig "RebootSleep")" || { die -nolog "Error: Couldn't read value for RebootSleep from the config file."; }


#### Main

echo -n "Updating crontab..."
[[ "$debugmode" ]] && echo

### remove the persistence cron job before any other action since this will be done anyway
remove_cron_job "persistence"

# only remove the autoupdate cron job now if we know that autoupdate should be disabled
if [[ "$cron_schedule" = "disable" ]]; then
	remove_cron_job "autoupdate"
fi

### create new persistence cron job
if [[ ! "$no_persistence" ]]; then
	create_cron_job "persistence"
fi

### create new autoupdate cron job
if [[ "$cron_schedule" != "disable" ]]; then
	create_cron_job "autoupdate"
fi

cron_lines="$(crontab -u root -l 2>/dev/null | grep "${suite_name}")"
[[ "$debugmode" ]] && echo
debugprint "Updated crontab: \n$cron_lines\n"

echo "Ok."

if [[ "$no_persistence" ]]; then
	echo
	echo "Note: no persistence was configured during installation. Geoblocking will be deactivated upon reboot!"
	echo "To enable persistence, run the *install script again without the '-n' option."
fi


debugexitmsg

exit 0
