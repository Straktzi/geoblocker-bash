#!/usr/bin/env bash

# geoblocker-bash-manage

# Provides an interface to configure geoblocking.

#### Initial setup
export LC_ALL=C
printf '%s\n' "$PATH" | grep '/usr/local/bin' &>/dev/null || export PATH="$PATH:/usr/local/bin"

me=$(basename "$0")

# check for root
[[ "$EUID" -ne 0 ]] && {
	err="Error: $me needs to be run as root."
	echo "$err" >&2
	exit 1
}

suite_name="geoblocker-bash"
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck disable=SC2015
[[ -n "$script_dir" ]] && cd "$script_dir" || { echo "$me: Error: Couldn't cd into '$script_dir'." >&2; exit 1; }

# shellcheck source=geoblocker-bash-common
source "$script_dir/${suite_name}-common" || { echo "$me: Error: Can't source ${suite_name}-common." >&2; exit 1; }

# **NOTE** that some functions and variables are sourced from the *common script


# sanitize arguments
sanitize_args "$@"
# replace arguments with sanitized ones
set -- "${arguments[@]}"

#### USAGE

usage() {
    cat <<EOF

$me
    Provides an interface to configure geoblocking.

Usage: $me <action> [-c "country_code [country_code] ... [country_code]"] [-s <"sch_expression"|disable>] [-f] [-t] [-d] [-h]

Actions:
    add|remove                    : add or remove country codes (ISO 3166-1 alpha-2) to/from geoblocking rules
    schedule                      : change the cron schedule (has no effect on iptables rules)
    status                        : check on the current status of geoblocking

Options:
    -c <"country_codes">          : country codes (ISO 3166-1 alpha-2). if passing multiple country codes, use double quotes.
    -s <"sch_expression"|disable> : schedule expression for the periodic cron job implementing auto-updates of the ip lists,
                                            must be inside double quotes.
                                            default schedule is "15 4 * * *" (at 4:15 [am] every day)
                                        disable: *skip* creating the cron job which is required for automatic updates of the ip list

    -f                            : Force the action even if it doesn't make sense or may cause remote server lockout.
    -t                            : Test mode: inject unexpected country code and verify fault recovery
    -d                            : Debug
    -h                            : This help

EOF
}


#### PARSE ARGUMENTS

# 1st argument should be the requested action
action="$1"
shift 1

# check for valid action

case "$action" in
	add) ;;
	remove) ;;
	status) ;;
	schedule) ;;
	"") usage; die -nolog "Specify action in the 1st argument!" ;;
	*) usage; err1="Error: Unrecognized action: '$action'."; err2="Specify action in the 1st argument!"; die -nolog "$err1" "$err2" ;;
esac

# process the rest of the arguments
while getopts ":c:s:ftdh" opt; do
	case $opt in
		c) ccodes_arg=$OPTARG;;
		s) cron_schedule=$OPTARG;;
		f) force_action="true";;
		d) debugmode_args="true";;
		h) usage; exit 0;;
		t) testmode=true;;
		\?) usage; echo "Error: Unknown option: '-$OPTARG'." >&2; exit 1;;
	esac
done
shift $((OPTIND -1))

# check if there are unprocessed arguments
[[ -n "$*" ]] && {
	usage
	err1="Error in arguments. First unrecognized argument: '$1'."
	err2="Note: If specifying multiple country codes, put them in double quotation marks."
	die -nolog "$err1" "$err2"
}

echo

# get debugmode variable from either the args or environment variable, depending on what's set
debugmode="${debugmode_args:-$debugmode}"
# set env var to match the result
export debugmode
export testmode

# Print script enter message for debug
debugentermsg


#### FUNCTIONS

report_status() {
	case "$list_type" in
		whitelist) expected_policy="DROP"; expected_rule_type="ACCEPT"  ;;
		blacklist) expected_policy="ACCEPT"; expected_rule_type="DROP" ;;
		*) die "Error: unrecognized list type '$list_type'!"
	esac

	# read iptables state and ipsets list into variables to avoid querying iptables and ipset multiple times
	# these values are also re-used in some functions in the *common script
	declare -A iptables_output
	for family in $families; do
		case "$family" in
			ipv4 ) iptables_command="iptables" ;;
			ipv6 ) iptables_command="ip6tables"
		esac
		iptables_output[$family]="$($iptables_command -vL)" || die "Error: failed to get $family iptables state."
	done

	echo -e "\n${purple}Geoblocking status report:${no_color}"

	echo -e "\nGeoblocking mode: ${purple}${list_type}${no_color}."

	# check default chain policies
	declare -A input_policy
	declare -A forward_policy
	for family in $families; do
		input_policy[$family]="$(awk '$0 ~ "INPUT" {-F"policy| "; print $4}' <<< "${iptables_output[$family]}")"
		forward_policy[$family]="$(awk '$0 ~ "FORWARD" {-F"policy| "; print $4}' <<< "${iptables_output[$family]}")"
		if [[ -z "${input_policy[$family]}" || -z "${forward_policy[$family]}" ]]; then
			die "Error: failed to determine current policies for INPUT and FORWARD chains."
		fi
	done

	# check ipsets and iptables rules for active ccodes
	# shellcheck disable=SC2119
	active_lists="$(find_active_lists)"; rv=$?
	if [[ -z "$active_lists" ]]; then
		echo -e "\n${red}Warning${no_color}: no geoblocking firewall rules found!\n"
	else
		echo -e "Active ip lists: '${yellow}$active_lists${no_color}'."
	fi

	# shellcheck disable=SC2015
	[[ -n "$config_coherent" ]] && rv=0 || { check_lists_coherency; rv=$?; }
	if [[ "$rv" -ne 0 ]]; then
		echo -e "\n${red}Error${no_color}: discrepancy detected between the config file and iptables rules!\n" >&2
		[[ "$ipsets_incoherent" ]] && \
			echo -e "\n${purple}Warning:${no_color} discrepancy detected between existing geoblocking ipsets and geoblocking firewall rules!\n" >&2
	fi

	# report INPUT and FORWARD chain policies
	declare -A input_policy_colored
	declare -A forward_policy_colored
	echo -e "\n${yellow}Active firewall policies${no_color}:"
	for family in $families; do
		[[ "${input_policy[$family]}" = "$expected_policy" ]] && input_policy_colored[$family]="${green}✔ ${purple}${input_policy[$family]}${no_color}" || \
			input_policy_colored[$family]="${red}✘ ${purple}${input_policy[$family]}${no_color}"
		[[ "${forward_policy[$family]}" = "$expected_policy" || "${forward_policy[$family]}" = "DROP" ]] && \
		forward_policy_colored[$family]="${green}✔ ${purple}${forward_policy[$family]}${no_color}" || \
			forward_policy_colored[$family]="${red}✘ ${purple}${forward_policy[$family]}${no_color}"

		echo -e "$family - INPUT chain: ${input_policy_colored[$family]}, FORWARD chain: ${forward_policy_colored[$family]}"
	done
	echo

	# check INPUT and FORWARD chains default policy compatibility with list_type
	for family in $families; do
		[[ "${input_policy[$family]}" != "$expected_policy" ]] && {
					echo -e "${purple}WARNING${no_color}: $list_type functionality requires INPUT chain policy to be '$expected_policy' but it is '${input_policy[$family]}' for family $family."
					echo -e "${red}$list_type is not functioning correctly${no_color}.";
					}
		[[ "${forward_policy[$family]}" != "$expected_policy" && "${forward_policy[$family]}" != "DROP" ]] && {
					echo -e "${purple}WARNING${no_color}: $list_type functionality recommends FORWARD chain policy to be '$expected_policy' but it is '${forward_policy[$family]}' for family $family."
					}
	done

	for family in $families; do
		iptables_rules_header="$(grep -m1 "prot opt" <<< "${iptables_output[$family]}" | cut -b12-150)"
		# report geoblocking firewall rules
		echo -e "${yellow}${list_type^} geoblocking firewall rules ($family)${no_color}:"
		echo "------------------------------------------------------------------------------------------------------------------------"
		echo -e "$iptables_rules_header"
		echo "------------------------------------------------------------------------------------------------------------------------"
		geoblocking_rules="$(grep "match-set ${suite_name}" <<< "${iptables_output[$family]}" | grep "$expected_rule_type" | cut -b12-170)"
		if [[ -z "$geoblocking_rules" ]]; then echo -e "${red}None.${no_color}"
		else
			 echo -e "$geoblocking_rules"
		fi

		# report auxiliary firewall rules
		echo -e "\n${yellow}Auxiliary geoblocking firewall rules ($family)${no_color}:"
		echo "------------------------------------------------------------------------------------------------------------------------"
		echo -e "$iptables_rules_header"
		echo "------------------------------------------------------------------------------------------------------------------------"
		aux_rules="$(grep "${suite_name}_aux" <<< "${iptables_output[$family]}" |cut -b12-170)"
		if [[ -z "$aux_rules" ]]; then echo -e "${red}None.${no_color}\n"
		else
			 echo -e "${aux_rules}\n"
		fi
	done

	# check if cron service is enabled
	check_cron || crondisabled="true"
	if [[ -n "$crondisabled" ]]; then
		echo -e "\n${purple}WARNING${no_color}: cron service appears to be disabled. Both persistence across reboots and autoupdates will likely not work.\n"
	else
		echo -e "Cron system service is ${green}enabled${no_color}."

		# check cron jobs

		# store current cron jobs in a variable
		cron_jobs="$(crontab -u root -l 2>/dev/null)"

		# check for persistence cron job
		persistence_job="$(grep "${suite_name}-persistence" <<< "$cron_jobs")"
		#shellcheck disable=SC2015
		[[ -n "$persistence_job" ]] && echo -e "${green}Persistence cron job is active${no_color}." || {
				echo -e "${purple}WARNING${no_color}: Persistence cron job is ${red}missing${no_color}."
				echo -e "Geoblocking ${purple}will not work after reboot${no_color}, unless you have a different persistence tool installed."
			}

		# check for autoupdate cron job
		autoupdate_job="$(grep "${suite_name}-autoupdate" <<< "$cron_jobs")"
		if [[ -n "$autoupdate_job" ]]; then
			echo -e "${green}Autoupdate cron job is active.${no_color}"
			update_schedule="$(echo "$autoupdate_job" | cut -f1 -d\")"
			if [[ -n "$update_schedule" && "$update_schedule" != " " ]]; then
				echo -e "Autoupdate schedule: ${yellow}$update_schedule${no_color}\n"
			else
				echo -e "\n${red}Error:${no_color} Failed to determine autoupdate schedule. Complete cron line:"; echo -e "${autoupdate_job}\n"
			fi
		else
			echo -e "${yellow}NOTE${no_color}: Autoupdate cron job is ${red}missing${no_color}. Automatic ip list updates are ${red}disabled${no_color}.\n"
		fi
	fi
}

restore_from_config() {
# restore ccodes from the config file

	echo -e "\nWarning: Config incoherence detected between the firewall current status and the config file."
	[[ -n "$unexpected_lists" ]] && echo "Unexpected ip lists in the firewall: '$unexpected_lists'" >&2
	[[ -n "$missing_lists" ]] && echo "Missing ip lists in the firewall: '$missing_lists'" >&2
	echo "Would you like to re-apply the rules from the config file to fix this?"
	echo -e "\n'Y' to re-apply the config rules. 'N' to exit the script. 'S' to show configured ip lists.\n"

	while true; do
		read -p "(Y/N/S) " -n 1 -r

		if [[ "$REPLY" =~ ^[Yy]$ ]]; then echo; break
		elif [[ "$REPLY" =~ ^[Nn]$ ]]; then echo -e "\nExiting."; exit 1
		elif [[ "$REPLY" =~ ^[Ss]$ ]]; then
			echo -e "\n\n\n\n$list_type ip lists in the config file: '$config_lists'\n"
		else echo -e "\nPlease press 'y/n/s'.\n"
		fi
	done

	echo "Restoring $list_type lists '$config_lists' from the config file... "
	lists_to_remove="$(merge_lists "$config_lists" "$unexpected_lists" "$lists_to_change")"
	call_script "$run_command" remove -o -c "$lists_to_remove"
	[[ -n "$config_lists" ]] && $run_command add -o -c "$config_lists"

	check_lists_coherency; rv=$?
	if [[ $rv -eq 0 ]]; then
		echo "Successfully re-applied previous $list_type ip lists."
	else
		echo "Failed to re-apply previous $list_type ip lists." >&2
		[[ -n "$unexpected_lists" ]] && echo "Unexpected $list_type ip lists in the firewall: '$unexpected_lists'" >&2
		[[ -n "$missing_lists" ]] && echo "Missing $list_type ip lists in the firewall: '$missing_lists'" >&2
		[[ "$ipsets_incoherent" ]] && echo "Warning: discrepancy detected between existing geoblocking ipsets and geoblocking firewall rules!" >&2
		# call the *backup script to initiate recovery from fault
		call_script "${suite_name}-backup" restore; rv=$?

		check_lists_coherency; rv1=$?; rv=$(( rv + rv1 ))
		if [[ $rv -eq 0 ]]; then
			echo "Successfully re-applied previous $list_type lists."
		else
			echo "Failed to re-apply previous $list_type lists." >&2
			[[ -n "$unexpected_lists" ]] && echo "Unexpected $list_type ip lists in the firewall: '$unexpected_lists'" >&2
			[[ -n "$missing_lists" ]] && echo "Missing $list_type ip lists in the firewall: '$missing_lists'" >&2
			[[ "$ipsets_incoherent" ]] && echo "Warning: discrepancy detected between existing geoblocking ipsets and geoblocking firewall rules!" >&2
			die "$rv" "Something is not working as it should. Consider fixing your firewall or your system. If it's a bug then please report it."
		fi
	fi
}

check_for_lockout() {
# tries to prevent the user from locking themselves out

# if we are currently installing, checks local country code vs $planned_lists list
# if not, checks it vs $ccodes_to_change list

# the reason for this distinction is in case the user decides to ignore the warning and proceed,
# if we continue to check vs $planned_lists then they will have to see the warning every time and reply to it every time,
# even for actions unrelated to their ccode
# on the other hand, if we check vs $ccodes_to_change during installation, we may miss the fact that their $ccode is not included in the whitelist

# if lockout condition is detected, prints a warning and returns 0
# if all is good, or if local country wasn't determined during installation, prints nothing and returns 0
# returns 1 if encounters errors

	local user_ccode=""
	local filtered_ccode=""
	user_ccode="$(getconfig "UserCcode")" || { echo "Error: Couldn't read value for UserCcode from the config file." >&2; return 1; }

	# if we couldn't get user's country code durint installation, give up on checking for possible lockout
	# otherwise it would be very annoying for the user
	[[ -z "$user_ccode" ]] && return 0

	planned_ccodes="$(printf '%s' "$planned_lists" | tr ' ' '\n' | cut -s -d_ -f1 | sort -u | tr '\n' ' ')"; rv=$?

	if [[ "$in_install" ]]; then
		filtered_ccode="$(find_lists_intersection "$user_ccode" "$planned_ccodes")"

		case "$list_type" in
			whitelist)
				if [[ -z "$filtered_ccode" ]]; then
					msg1="Your country code '$user_ccode' is not included in the planned whitelist '$planned_ccodes'.\n"
					msg2="Make sure you do not lock yourself out."
					echo -e "$msg1$msg2"
				fi
				return 0
			;;

			blacklist)
				if [[ -n "$filtered_ccode" ]]; then
					msg1="Your country code '$user_ccode' is included in the planned blacklist '$planned_ccodes'.\n"
					msg2="Make sure you do not lock yourself out."
					echo -e "$msg1$msg2"
				fi
				return 0
			;;
			*) echo -e "\nError: check_for_lockout(): Unexpected list type '$list_type'.\n" >&2; return 1 ;;
		esac

	else
		ccodes_to_change="$(printf '%s' "$lists_to_change" | tr ' ' '\n' | cut -s -d_ -f1 | sort -u | tr '\n' ' ')"
		filtered_ccode="$(find_lists_intersection "$user_ccode" "$ccodes_to_change")"

		# if user is not doing anything related to their own country code, skip further checks
		[[ -z "$filtered_ccode" ]] && return 0

		case "$action" in
			add)
				if [[ "$list_type" = "blacklist" ]]; then
					msg1="You are trying to add your country code '$user_ccode' to the blacklist.\n"
					msg2="Make sure you do not lock yourself out."
					echo -e "$msg1$msg2"
				fi
				return 0
			;;
			remove)
				if [[ "$list_type" = "whitelist" ]]; then
					msg1="You are trying to remove your country code '$user_ccode' from the whitelist.\n"
					msg2="Make sure you do not lock yourself out."
					echo -e "$msg1$msg2"
				fi
				return 0
			;;
			*) echo -e "\nError: check_for_lockout(): Unexpected action '$action'.\n" >&2; return 1 ;;
		esac
	fi
}


#### VARIABLES

# set global variables
export list_type

# set environment variable "nolog" to avoid daughter scripts writing errors
#	to syslog when encountering incorrect arguments from the user
export nolog="true"

# set environment variable "manualmode" to signal to daughter scripts that user interaction is possible
export manualmode="true"

install_dir="$(getconfig "Installdir")" || die "Error: Couldn't read value for Installdir from the config file."

list_type="$(getconfig "ListType")" || die "Error: Couldn't read value for ListType from the config file."

families="$(getconfig "Families")" || die "Error: Couldn't read value for Families from the config file."

[[ "$list_type" != "whitelist" && "$list_type" != "blacklist" ]] &&  die "Error: Unrecognized list type '$list_type'!"

# convert input country codes (ccodes) to upper case
ccodes_arg="${ccodes_arg^^}"

# remove duplicates etc
ccodes_arg="$(sanitize_string "$ccodes_arg")"

config_lists="$(getconfig "Lists")" || die "Error: Couldn't read value for Lists from the config file."

# convert the string to lower case
action="${action,,}"

run_command="${install_dir}/${suite_name}-run"


#### CHECKS

missing_deps="$(check_deps iptables-save iptables-restore ipset)" || die "Error: missing dependencies: $missing_deps."


# check that the config file exists
[[ ! -f "$conf_file" ]] && die "Config file '$conf_file' doesn't exist! Run the installation script again."

[[ -z "$list_type" ]] && die "\$list_type variable should not be empty! Something is wrong!"


## Check arguments for sanity

if [[ ("$action" = "add" || "$action" = "remove") ]]; then
	# check for valid country codes
	[[ -z "$ccodes_arg" ]] &&die "Error: action '$action' requires to specify countries with '-c <country_codes>'!"
	rv=0
	for ccode in $ccodes_arg; do
		validate_ccode "$ccode"; rv1=$?
		case "$rv1" in
			1)  die "Internal error while trying to validate country codes." ;;
			2)  [[ -z "$bad_ccodes" ]] && bad_ccodes="$ccode" || bad_ccodes="$bad_ccodes $ccode"
				(( rv++ ))
			;;
		esac
	done

	[[ "$rv" -ne 0 ]] && {
		errmsg1="Error: Invalid country codes: '$bad_ccodes'."
		errmsg2="Look up 2-letter country codes (ISO 3166-1 alpha-2) online and try again."
		die "$errmsg1" "$errmsg2"
	}
fi

[[ "$action" = "schedule" && ( -n "$ccodes_arg" || -n "$force_action" ) ]] && \
	die "Action '$action' only supports changing the cron schedule! Do not use it with any option except '-s' or '-d' !"

[[ "$action" = "status" && ( -n "$ccodes_arg" || -n "$force_action" ) ]] && \
	die "Command '$action' only supports checking on current status of geoblocking! Do not use it with any option except '-l' or '-d' !"

[[ "$action" != "schedule" && -n "$cron_schedule" ]] && {
	msg1="Error: the '-s <\"cron_schedule\">' option only works with the \"schedule\" action."
	msg2="To set up cron schedule, use '$me schedule -s <\"cron_schedule\">'"
	usage
	die "$msg1" "$msg2";
}


#### MAIN

# check config coherency vs active ipsets and firewall rules before performing any action
unset config_coherent
# shellcheck disable=SC2015
check_lists_coherency && config_coherent="true" || restore_from_config

if [[ "$action" = "status" ]]; then
	report_status
	unset list_type debugmode nolog manualmode
	exit 0
fi

for ccode in $ccodes_arg; do
	for family in $families; do
		lists_arg+="${ccode}_${family} "
	done
done
lists_arg="${lists_arg/% }"

case "$action" in
	add)
		requested_lists="$(merge_lists "$config_lists" "$lists_arg")"
#		debugprint "requested resulting lists: '$requested_lists'"

		if [[ -z "$force_action" ]]; then
			# remove any entries already present in config_lists from lists_arg and assign to lists_to_change
			lists_to_change="$(find_lists_difference "$config_lists" "$requested_lists")"

			# find which lists were specified for addition but already exist
			wrong_lists="$(find_lists_intersection "$lists_arg" "$config_lists")"

			[[ -n "$wrong_lists" ]] && echo "NOTE: ip lists '$wrong_lists' have already been added to the $list_type." >&2
		else
			lists_to_change="$lists_arg"
		fi
		planned_lists="$(merge_lists "$config_lists" "$lists_to_change")"
#		debugprint "action: add, lists_to_change: '$lists_to_change'"
	;;

	remove)
#		debugprint "requested lists to remove: '$lists_arg'"
		if [[ -z "$force_action" ]]; then
			# find duplicate-free intersection between config_lists and lists_arg
			lists_to_change="$(find_lists_intersection "$config_lists" "$lists_arg")"
			# find which lists were specified for removal but don't exist
			good_lists="$(find_lists_intersection "$lists_to_change" "$lists_arg")"
			wrong_lists="$(find_lists_difference "$lists_arg" "$good_lists")"
			[[ -n "$wrong_lists" ]] && echo "NOTE: ip lists '$wrong_lists' have not been added to the $list_type, so can not remove." >&2
		else
			lists_to_change="$lists_arg"
		fi
		# remove any entries found in lists_to_change from config_lists and assign to planned_lists
		planned_lists="$(subtract_list_a_from_b "$lists_to_change" "$config_lists")"
	;;
esac


if [[ "$action" != "add" && "$action" != "remove" ]]; then
	debugprint "Skipping the *run script call because specified action was '$action'."
else
	if [[ -z "$lists_to_change" && -z "$force_action" ]]; then
		config_lists="$(getconfig "Lists")" || die "Error: Couldn't read value for Lists from the config file."

		echo -e "\nLists in the final $list_type: '${yellow}$config_lists${no_color}'."
		die 254 "Nothing to do, exiting."
	fi

	debugprint "planned lists after '$action': '$planned_lists'"

	# if planned_lists list is empty
	if [[ -z "$planned_lists" && -z "$force_action" && "$list_type" = "whitelist" ]]; then
		die "Planned whitelist is empty! Disallowing this to prevent accidental lockout of a remote server."
	fi

	# try to prevent possible user lock-out
	lockout_expected_msg="$(check_for_lockout)" ||  die "Error in 'check_for_lockout()' function."

	if [[ -n "$lockout_expected_msg" ]]; then
			echo -e "\n${red}Warning${no_color}: $lockout_expected_msg"
			echo -e "\nProceed?"
			while true; do
				read -p "(Y/N) " -n 1 -r
				if [[ "$REPLY" =~ ^[Yy]$ ]]; then echo -e "\n\nProceeding..."; break
				elif [[ "$REPLY" =~ ^[Nn]$ ]]; then
						[[ ! "$in_install" ]] && echo -e "\n\nIp lists in the final $list_type: '${yellow}$config_lists${no_color}'."
						echo
						die "Aborted action '$action' for ip lists '$lists_to_change'."
				else echo -e "\nPlease press 'y/n'.\n"
				fi
			done
	fi


	### Call the *run script

	call_script "$run_command" "$action" -c "$lists_to_change"; rv=$?

	# positive return code means apply failure or another permanent error, except for 254
	if [[ $rv -gt 0 && $rv -ne 254 ]]; then
		echo "Error performing action '$action' for lists '$lists_to_change'." >&2

		if [[ -z "$config_lists" ]]; then
			die "Can not restore previous ip lists for the $list_type because it is not found in the config file."
		fi
		restore_from_config
	fi

	# shellcheck disable=SC2119
	new_verified_lists="$(find_active_lists)"
	failed_lists="$(subtract_list_a_from_b "$new_verified_lists" "$planned_lists")"

	if [[ -n "$failed_lists" ]]; then
		debugprint "planned_lists: '$planned_lists', new_verified_lists: '$new_verified_lists', failed_lists: '$failed_lists'."
		echo "Warning: failed to apply new $list_type rules for ip lists: $failed_lists." >&2
		# if the error encountered during installation, exit with error in order to fail the installation
		[[ "$in_install" ]] && die
	fi

	# if all 'add' actions failed
	if [[ -z "$(find_lists_difference "$lists_to_change" "$failed_lists")" ]]; then
		die "All actions failed."
	fi

	debugprint "Writing new config to file: 'Lists=$new_verified_lists'"
	setconfig "Lists=$new_verified_lists" || die "Failed to write updated lists '$new_verified_lists' to the config file"

####### Fault recovery test: inject unrequested ccode
#[ "$testmode" ] &&	$run_command add -o -c "ge"; rv=$?
#######


	# double-check coherency after applying new lists
	check_lists_coherency || { lists_to_change=""; restore_from_config; }

	echo -e "\nIp lists in the final $list_type: '${yellow}$config_lists${no_color}'."
	echo
	[[ ! "$in_install" ]] && echo -e "View current geoblocking status with '${yellow}${suite_name} status${no_color}' (may require 'sudo').\n"
fi


### Cron jobs management
if [[ "$action" != "schedule" ]]; then
	debugprint "Skipping cron setup because action is not 'schedule'."
else
	[[ -z "$cron_schedule" ]] && { usage; die "Specify cron schedule for autoupdate or 'disable'."; }

	# write to the config file in order to communicate parameters to *cronsetup
	# if the requested schedule is invalid, -cronsetup will leave the existing actual cron job as is
	setconfig "CronSchedule=$cron_schedule" || die "Failed to write the updated CronSchedule value to the config file"

	call_script "${suite_name}-cronsetup"; rv=$?
	[[ "$rv" -ne 0 ]] && die "Error: Failed to create or update cron jobs."
fi

[[ ! "$in_install" ]] && echo


unset list_type debugmode nolog manualmode testmode

exit 0
