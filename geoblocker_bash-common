#!/bin/bash

# geoblocker_bash-common

# Common functions and variables for geoblocker_bash suite
# This script does nothing if called directly. It is sourced from other scripts.

### Functions

echolog() {
# outputs arguments to stdout and writes them to syslog
# if one of the arguments is "-err" then redirect output to stderr
	msg_args=()
	# check for "-err" option in arguments
	for msg_arg in "$@"; do
		[ "$msg_arg" = "-err" ] && msg_is_err="true" || msg_args+=( "$msg_arg" )
	done

	if [ -n "${msg_args[*]}" ]; then
		echo ""
		# loop through arguments and print them to stderr and to the syslog
		# "$nolog" is set as environment variable (used in *manage and *install scripts)
		for arg in "${msg_args[@]}"; do
			[ "$msg_is_err" ] && echo "$me_short: $arg" 1>&2 || echo "$me_short: $arg"
			[ "$nolog" != "true" ] && logger -t "$me" "$arg"
		done
	else debugprint "nothing in msg_args"
	fi
}

debugprint() {
# prints a debug message
	[ "$debugmode" ] && echo -e "	Debug: ${me_short}: $*" >&2
}

debugentermsg() {
	args="$(for arg in "${arguments[@]}"; do echo -n "'$arg' "; done)"
	debugprint "\033[1;33mStarted *${me_short_cap}* with args: ${args}\033[0m"
}
debugexitmsg() {
	[ -n "$parent_short_cap" ] && debugprint "\033[1;33mBack to *$parent_short_cap*...\033[0m"
}

die() {
	# if first arg is a number, assume it's the exit code
	if [[ "$1" =~ ^[0-9]+$ ]]; then rv="$1"; shift; else rv="1"; fi

	die_args=()

	# check for "-nolog" option in arguments
	for die_arg in "$@"; do
		[ "$die_arg" = "-nolog" ] && nolog="true" || die_args+=( "$die_arg" )
	done

	if [ -n "${die_args[*]}" ]; then
		echo "" 1>&2
		# loop through arguments and print them to stderr and to the syslog
		# "$nolog" is set either when calling die() or as environment variable (used in *manage and *install scripts)
		for arg in "${die_args[@]}"; do
			echo "$me_short: $arg" 1>&2
			[ "$nolog" != "true" ] && logger -t "$me" "$arg"
		done
	fi
	[ -n "$parent_short_cap" ] && debugprint "\033[1;33mBack to $parent_short_cap...\033[0m"
	echo "" 1>&2
	exit "$rv"
}

getconfig() {
# reads a field named $1 from the config file $conf_file (or from file $2 if specified)
# outputs the resulting field
# returns 0 if successful, 1 if not
	fieldname="$1"
	configfile="${2:-$conf_file}"
	[ -z "$fieldname" ] || [ -z "$configfile" ] && return 1

	entry="$(grep "$fieldname=" "$configfile" 2>/dev/null)" || return 2

	field="${entry//$fieldname=}"
	echo "$field"

	return 0
}

setconfig() {
# changes a field named $1 in the config file $conf_file (or in file $3 if specified) to value $2
# returns 0 if successful, 1 if not
	fieldname="$1"
	field="$2"
	configfile="${3:-$conf_file}"
	[ -z "$configfile" ] && { die "*common: setconfig: \$configfile is empty"; }
	[ -z "$fieldname" ] && { die "*common: setconfig: \$fieldname is empty"; }

	# create the config file if it doesn't exist
	touch "$configfile" || { die "*common: could not create configfile '$configfile'"; }

	# check if config line already exists
	grep "$fieldname=" "$configfile" > /dev/null; line_exists=$?

	# remove corresponding config line
	grep -v "$fieldname=" "$configfile" > "${configfile}.temp" || {
		[ "$line_exists" -eq 0 ] && { rm "${configfile}.temp"; die "*common: could not create temporary file '${configfile}.temp'"; }
	}
	mv "${configfile}.temp" "$configfile" || { rm "${configfile}.temp"; die "*common: could not rewrite file '$configfile'"; }

	# add updated config line
	echo -e "$fieldname=$field" >> "$configfile" || { die "*common: could not add entry '$fieldname=$field' to conf file '$configfile'"; }

	return 0
}

sanitize_string() {
# trims leading, trailing, and extra in-between whitespaces in input string
# replaces new lines (if any) with spaces
# also sorts and removes duplicates
	input_str="$*"
	result_str="$(echo "$input_str" | tr ' ' '\n' | sort -ibu |  tr '\n' ' ' | awk '{$1=$1};1')"
	echo "$result_str"
}

find_lists_intersection() {
# finds duplicates-free intersection between space-delimited fields in input strings $1 and $2,
#      and outputs the intersection as a string

	# convert space-separated lists to newline-separated sorted lists
	str1="$(echo "$1" | tr ' ' '\n' | sort -u)"
	str2="$(echo "$2" | tr ' ' '\n' | sort -u)"


	# piping into comm is not allowed so using the "<()" constructions
	# result is space separated intersection list
	intersect_str="$(comm -12 <(echo "$str1") <(echo "$str2"))"
	result_str="$(sanitize_string "$intersect_str")"
	echo "$result_str"
}

find_lists_difference() {
# finds space-delimited fields that exist in strings $1 or $2 but not both
#      and outputs the difference as a string

	# convert space-separated lists to newline-separated sorted lists
	str1="$(echo "$1" | tr ' ' '\n' | sort -u)"
	str2="$(echo "$2" | tr ' ' '\n' | sort -u)"

	# can't pipe into comm so using the "<()" constructions
	# result is space separated difference list
	diff_str="$(comm -3 <(echo "$str1") <(echo "$str2"))"
	result_str="$(sanitize_string "$diff_str")"
	echo "$result_str"
}

subtract_list_a_from_b() {
# removes all space-delimited fields found in string $1 from string $2, outputs the result as a string

	str1="$1"; str2="$2"
	while read -r field_str; do
		str2="${str2//$field_str/}"
	done < <(echo "$str1" | tr ' ' '\n' )
	result_str="$(sanitize_string "$str2")"
	echo "$result_str"
}

merge_lists() {
# merges 2 lists then sanitizes the list by removing extra white spaces and replacing \n with " "
	merged_list="$1 $2"
	result_list="$(sanitize_string "$merged_list")"
	echo "$result_list"
}


check_tlds_coherency() {
# checks whether current ipsets and iptables rules match ones in the config file
	active_tlds="$(find_active_tlds)"

	debugprint "active_tlds: '$active_tlds'"
	debugprint "config_tlds: '$config_tlds'"

	# reflect discrepancies in global variables $unexpected_tlds and $missing_tlds
	unexpected_tlds="$(subtract_list_a_from_b "$config_tlds" "$active_tlds")"
	missing_tlds="$(subtract_list_a_from_b "$active_tlds" "$config_tlds")"

	tlds_difference="$(find_lists_difference "$active_tlds" "$config_tlds")"
	[ "$tlds_difference" == "" ] && return 0 || return 1
}

find_active_tlds() {
# checks current ipsets and iptables rules for geoblocker
# returns a list of active tlds (country codes)

	current_ipset_tlds="$(ipset list -n | grep "$suite_name" | grep -o '..$' | tr '\n' ' ' | awk '{$1=$1};1')"
	current_iprules_tlds="$(iptables -L | grep -oP "(?<=src /\* $suite_name\_).*?(?= \*/)" | tr '\n' ' ' | awk '{$1=$1};1')"

	tlds_intersection="$(find_lists_intersection "$current_ipset_tlds" "$current_iprules_tlds")"
	tlds_difference="$(find_lists_difference "$current_ipset_tlds" "$current_iprules_tlds")"
	echo "$tlds_intersection"
	[ "$tlds_difference" == "" ] && return 0 || return 1
}


# this can't be used from a sourced script because it'll return the path to the sourced script and not to the caller
# leaving it in for reference
#get_script_dir () {
#	SOURCE=${BASH_SOURCE[0]}
#	while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
#		DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
#		SOURCE=$(readlink "$SOURCE")
#		[[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
#		# if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
#	done
#	DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
#	echo "$DIR"
#}

getlocalsubnet() {
# attempts to find local subnet for the main network interface

	# regex patterns used for ipv4 validation
	# using Perl regex syntax because grep is faster with it than with native grep syntax
	# regex compiled from 2 suggestions found here:
	# https://stackoverflow.com/questions/5284147/validating-ipv4-addresses-with-regexp
	ip_regex='^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}'
	mask_regex='(/([01]?\d\d?|2[0-4]\d|25[0-5]))$'
	subnet_regex="${ip_regex}${mask_regex}"

	# returns local ip with subnet mask
	localip="$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}')"

	# Change last ipv4 octet to 0
	lsubnet="$(echo "$localip" | sed 's|\([0-9]*\.[0-9]*\.[0-9]*\.\)[0-9]*|\10|')"

	# Verifies that the argument is a valid ipv4 subnet
	echo "$lsubnet" | grep -P "$subnet_regex" &>/dev/null; rv=$?

	if [ $rv -ne 0 ]; then
		# if validation fails, output empty string
		echo ""
	else
		echo "$lsubnet"
	fi
	return $rv
}

sanitize_args() {
# trims extra whitespaces, discards empty arguments
arguments=()
for arg in "$@"; do
	# trim leading and trailing whitespaces
	arg="$(awk '{$1=$1};1' <<< "$arg")"
	# add to array while discarding empty arguments
	[ -n "$arg" ] && arguments+=("$arg")
done
}

### Variables
me="$(basename "$0")"
me_short="${me//${suite_name}-/}"
me_short_cap="${me_short^^}"

parent="$(basename "$(ps -o args= $PPID)" 2>/dev/null | awk -v RS='/| ' '/^.*'$suite_name'/ {a=$0} END{print a}')"

[ "$parent" = "$me" ] && parent=""
parent_short="${parent//"${suite_name}-"/}"
parent_short_cap="${parent_short^^}"

conf_dir="/etc/${suite_name}"
conf_file="${conf_dir}/${suite_name}.conf"


### Main
arguments=("$@")

return 0
